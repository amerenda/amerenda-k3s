apiVersion: v1
kind: ConfigMap
metadata:
  name: homeassistant-automations
  namespace: home-assistant
data:
  alex_ac_auto_cool_away.yaml: |
    alias: Alex - AC Auto Cool (Away)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        above: 30
        for: "00:05:00"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.151732605151026_climate','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.151732605151026_climate }
        data: { temperature: 27 }

  alex_ac_auto_cool_home.yaml: |
    alias: Alex - AC Auto Cool (Home)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        above: 26
        for: "00:05:00"
    conditions:
      - condition: state
        entity_id: person.alex_merenda
        state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.151732605151026_climate','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.151732605151026_climate }
        data: { temperature: 24 }

  alex_ac_cool_off_hysteresis.yaml: |
    alias: Alex - AC Cool Off (Hysteresis)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        below: 23
        for: "00:03:00"
    conditions:
      - condition: template
        value_template: "{{ is_state_attr('climate.151732605151026_climate','hvac_mode','cool') }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: "off" }

  alex_camera_privacy_away.yaml: |
    alias: Alex - Camera Privacy (Away)
    mode: restart
    triggers:
      - trigger: zone
        entity_id: person.alex_merenda
        zone: zone.home
        event: leave
    actions:
      - action: light.turn_on
        target:
          entity_id:
            - light.bedroom_status_led
            - light.living_room_status_led
      - action: switch.turn_off
        target:
          entity_id:
            - switch.bedroom_privacy_mode
            - switch.living_room_privacy_mode

  alex_camera_privacy_home.yaml: |
    alias: Alex - Camera Privacy (Home)
    mode: restart
    triggers:
      - trigger: zone
        entity_id: person.alex_merenda
        zone: zone.home
        event: enter
    actions:
      - action: light.turn_off
        target:
          entity_id:
            - light.bedroom_status_led
            - light.living_room_status_led
      - action: switch.turn_on
        target:
          entity_id:
            - switch.bedroom_privacy_mode
            - switch.living_room_privacy_mode

  alex_cleanup_old_photos.yaml: |
    alias: Alex - Cleanup Old Photos (30+ days)
    mode: single
    triggers:
      - platform: time
        at: "02:00:00"
    conditions: []
    actions:
      - service: shell_command.cleanup_old_photos
        data: {}

  alex_living_room_night_lighting.yaml: |
    alias: Alex - Living Room Night Lighting
    description: "Applies red night lighting to living room when lights turn on or switch is pressed during night hours"
    use_blueprint:
      path: homeassistant/hue_living_room_defaults_blueprint.yaml
      input:
        living_room_lights:
          - light.living_room
        living_room_switch_events:
          - event.living_room_switch_button_1
        only_when_manual: true
        settle_seconds: 0
        event_states:
          - initial_press
          - short_release
        brightness: 26  # Very dim for night lighting
        color_mode: hs
        hs_hue: 0  # Red
        hs_sat: 100  # Full saturation for deep red
        transition_secs: 0.2

  alex_night_lighting_on_toggle.yaml: |
    # This automation has been replaced by alex_living_room_night_lighting.yaml
    # which uses the hue_living_room_defaults_blueprint.yaml blueprint

  alex_reolink_human_detect_alert.yaml: |
    alias: Alex - Reolink Human Alert (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_person
          - binary_sensor.bedroom_person
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_person':
              {'camera': 'camera.living_room_fluent','room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_person':
              {'camera': 'camera.bedroom_fluent',    'room':'Bedroom',    'slug':'bedroom'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      timestamp: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
      path: "/config/www/intruders/{{ slug }}_{{ timestamp }}.jpg"
      url: "/local/intruders/{{ slug }}_{{ timestamp }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: notify.mobile_app_pixel_9_pro_xl
        data:
          title: "Human detected - {{ room }}"
          message: "{{ now().strftime('%-I:%M %p on %b %-d') }}"
          data:
            image: "{{ url }}"
            tag: "human-{{ slug }}"
            importance: high
            sticky: true

  alex_reolink_pet_detect_snapshot.yaml: |
    alias: Alex - Reolink Pet Snapshot (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_animal
          - binary_sensor.bedroom_animal
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_animal':
              {'camera': 'camera.living_room_fluent', 'room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_animal':
              {'camera': 'camera.bedroom_fluent',     'room':'Bedroom',    'slug':'bedroom'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      timestamp: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
      path: "/config/www/pets/{{ slug }}_{{ timestamp }}.jpg"
      url: "/local/pets/{{ slug }}_{{ timestamp }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: input_text.set_value
        target: { entity_id: input_text.event_image_location_text }
        data: { value: "{{ slug }}" }
      - action: input_text.set_value
        target: { entity_id: input_text.event_image_timestamp_text }
        data: { value: "{{ timestamp }}" }
      - action: notify.mobile_app_pixel_9_pro_xl
        data:
          title: "Pet detected - {{ room }}"
          message: "{{ now().strftime('%-I:%M %p on %b %-d') }}"
          data:
            image: "{{ url }}"
            tag: "pet-{{ slug }}"
            importance: low
            sticky: true

  blueprints_automation_homeassistant_hue_living_room_defaults_blueprint.yaml: |
    blueprint:
      name: Hue - lving Room defaults (light on or switch press)
      description: >
        Applies your default color/brightness to Living Room Hue lights when:
        1) the light turns ON (manually via Hue), or
        2) your Hue switch event entity fires (e.g., event.living_room_switch_button_1).
        For state-based turn-ons, can ignore HA-initiated calls using context.user_id.
      domain: automation
      input:
        living_room_lights:
          name: Living Room lights
          selector:
            entity:
              domain: light
              multiple: true
        living_room_switch_events:
          name: Living Room Hue switch event entities
          description: e.g. event.living_room_switch_button_1
          selector:
            entity:
              domain: event
              multiple: true
        only_when_manual:
          name: Only when manual (for light-on trigger)
          description: Skip when HA turned the light on (uses context.user_id is none)
          default: true
          selector:
            boolean: {}
        settle_seconds:
          name: Settle seconds (for light-on trigger)
          default: 1
          selector:
            number:
              min: 0
              max: 5
              step: 1
              unit_of_measurement: s
        event_states:
          name: Switch event states to react to
          description: Common: initial_press, short_release (leave as-is if unsure)
          default:
            - initial_press
            - short_release
          selector:
            select:
              multiple: true
              options:
                - initial_press
                - short_release
                - repeat
                - long_release
        brightness:
          name: Brightness (0â€“255)
          default: 180
          selector:
            number:
              min: 1
              max: 255
              step: 1
        color_mode:
          name: Color mode
          default: color_temp
          selector:
            select:
              options:
                - color_temp
                - hs
        color_temp_mireds:
          name: Color Temp (mireds)
          default: 350
          selector:
            number:
              min: 153
              max: 500
              step: 1
        hs_hue:
          name: HS â€“ Hue (0â€“360)
          default: 30
          selector:
            number:
              min: 0
              max: 360
              step: 1
        hs_sat:
          name: HS â€“ Saturation (0â€“100)
          default: 30
          selector:
            number:
              min: 0
              max: 100
              step: 1
        transition_secs:
          name: Transition (seconds)
          default: 0.4
          selector:
            number:
              min: 0
              max: 5
              step: 0.1
    
    mode: restart
    max_exceeded: silent
    
    variables:
      only_when_manual: !input only_when_manual
      event_states: !input event_states
      color_mode: !input color_mode
      brightness: !input brightness
      color_temp_mireds: !input color_temp_mireds
      hs_hue: !input hs_hue
      hs_sat: !input hs_sat
      transition_secs: !input transition_secs
    
    trigger:
      - id: light_on
        platform: state
        entity_id: !input living_room_lights
        to: "on"
        for:
          seconds: !input settle_seconds
    
      - id: switch_event
        platform: state
        entity_id: !input living_room_switch_events
    
    condition: []
    
    action:
      - choose:
          # Branch A: Light turned ON (typically via Hue/manual)
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'light_on' }}"
              - condition: template
                alias: "If only_when_manual, require external (non-HA) turn-on"
                value_template: >
                  {% if not only_when_manual %} true
                  {% else %} {{ trigger.to_state.context.user_id is none }}
                  {% endif %}
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'color_temp' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input living_room_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          color_temp: "{{ color_temp_mireds | int }}"
                          transition: "{{ transition_secs | float }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'hs' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input living_room_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                          transition: "{{ transition_secs | float }}"
    
          # Branch B: Hue switch event entity fired
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'switch_event' }}"
              - condition: template
                alias: "Only react to desired event states"
                value_template: >
                  {{ trigger.to_state is not none and
                     trigger.to_state.state in event_states }}
            sequence:
              - delay: "00:00:00.2"  # let Hue apply its ON, then override cleanly
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'color_temp' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input living_room_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          color_temp: "{{ color_temp_mireds | int }}"
                          transition: "{{ transition_secs | float }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'hs' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input living_room_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                          transition: "{{ transition_secs | float }}"

