apiVersion: v1
kind: ConfigMap
metadata:
  name: homeassistant-automations
  namespace: home-assistant
data:
  alex_ac_auto_cool_away.yaml: |
    alias: Alex - AC Auto Cool (Away)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        above: 30
        for: "00:05:00"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.151732605151026_climate','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.151732605151026_climate }
        data: { temperature: 27 }

  alex_ac_auto_cool_home.yaml: |
    alias: Alex - AC Auto Cool (Home)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        above: 26
        for: "00:05:00"
    conditions:
      - condition: state
        entity_id: person.alex_merenda
        state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.151732605151026_climate','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.151732605151026_climate }
        data: { temperature: 24 }

  alex_ac_cool_off_hysteresis.yaml: |
    alias: Alex - AC Cool Off (Hysteresis)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.151732605151026_climate
        attribute: current_temperature
        below: 23
        for: "00:03:00"
    conditions:
      - condition: template
        value_template: "{{ is_state_attr('climate.151732605151026_climate','hvac_mode','cool') }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.151732605151026_climate }
        data: { hvac_mode: "off" }

  alex_camera_privacy_away.yaml: |
    alias: Alex - Camera Privacy (Away)
    mode: restart
    triggers:
      - trigger: zone
        entity_id: person.alex_merenda
        zone: zone.home
        event: leave
    actions:
      - action: light.turn_on
        target:
          entity_id:
            - light.bedroom_status_led
            - light.living_room_status_led
      - action: switch.turn_off
        target:
          entity_id:
            - switch.bedroom_privacy_mode
            - switch.living_room_privacy_mode

  alex_camera_privacy_home.yaml: |
    alias: Alex - Camera Privacy (Home)
    mode: restart
    triggers:
      - trigger: zone
        entity_id: person.alex_merenda
        zone: zone.home
        event: enter
    actions:
      - action: light.turn_off
        target:
          entity_id:
            - light.bedroom_status_led
            - light.living_room_status_led
      - action: switch.turn_on
        target:
          entity_id:
            - switch.bedroom_privacy_mode
            - switch.living_room_privacy_mode

  alex_cleanup_old_photos.yaml: |
    alias: Alex - Cleanup Old Photos (30+ days)
    mode: single
    triggers:
      - platform: time
        at: "02:00:00"
    conditions: []
    actions:
      - service: shell_command.cleanup_old_photos
        data: {}

  alex_night_lighting_on_toggle.yaml: |
    alias: Alex - Night Lighting on Toggle
    mode: parallel
    triggers:
      - trigger: state
        entity_id:
          - light.living_room
          - light.bathroom
          - light.bedroom
          - light.hallway
          - light.kitchen
        from: "off"
        to: "on"
      - trigger: time
        at: "06:00:00"
    variables:
      is_past_cutoff: >
        {% set wd = now().weekday() %}  {# Mon=0..Sun=6 #}
        {% set current_hour = now().hour %}
        {% if wd in [4,5] %}
          {{ current_hour >= 1 or current_hour < 6 }}
        {% else %}
          {{ current_hour >= 23 or current_hour < 6 }}
        {% endif %}
      room_scenes:
        light.living_room: scene.living_room_nightlight
        light.bathroom: scene.bathroom_nightlight
        light.bedroom: scene.bedroom_nightlight
        light.hallway: scene.hallway_nightlight
        light.kitchen: scene.kitchen_nightlight
      room_scene: "{{ room_scenes[trigger.entity_id] }}"
      energize_scenes:
        light.living_room: scene.living_room_energize
        light.bathroom: scene.bathroom_energize
        light.bedroom: scene.bedroom_energize
        light.hallway: scene.hallway_energize
        light.kitchen: scene.kitchen_energize
      energize_scene: "{{ energize_scenes[trigger.entity_id] }}"
    actions:
      - choose:
          - conditions: 
              - condition: template
                value_template: "{{ trigger.platform == 'time' }}"
            sequence:
              - action: scene.turn_on
                target: { entity_id: "{{ energize_scene }}" }
          - conditions: 
              - condition: template
                value_template: "{{ trigger.platform == 'state' and is_past_cutoff }}"
            sequence:
              - action: scene.turn_on
                target: { entity_id: "{{ room_scene }}" }

  alex_reolink_human_detect_alert.yaml: |
    alias: Alex - Reolink Human Alert (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_person
          - binary_sensor.bedroom_person
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_person':
              {'camera': 'camera.living_room_fluent','room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_person':
              {'camera': 'camera.bedroom_fluent',    'room':'Bedroom',    'slug':'bedroom'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      timestamp: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
      path: "/config/www/intruders/{{ slug }}_{{ timestamp }}.jpg"
      url: "/local/intruders/{{ slug }}_{{ timestamp }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: notify.mobile_app_pixel_9_pro_xl
        data:
          title: "Human detected - {{ room }}"
          message: "{{ now().strftime('%-I:%M %p on %b %-d') }}"
          data:
            image: "{{ url }}"
            tag: "human-{{ slug }}"
            importance: high
            sticky: true

  alex_reolink_pet_detect_snapshot.yaml: |
    alias: Alex - Reolink Pet Snapshot (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_animal
          - binary_sensor.bedroom_animal
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_animal':
              {'camera': 'camera.living_room_fluent', 'room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_animal':
              {'camera': 'camera.bedroom_fluent',     'room':'Bedroom',    'slug':'bedroom'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      timestamp: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
      path: "/config/www/pets/{{ slug }}_{{ timestamp }}.jpg"
      url: "/local/pets/{{ slug }}_{{ timestamp }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: input_text.set_value
        target: { entity_id: input_text.event_image_location_text }
        data: { value: "{{ slug }}" }
      - action: input_text.set_value
        target: { entity_id: input_text.event_image_timestamp_text }
        data: { value: "{{ timestamp }}" }
      - action: notify.mobile_app_pixel_9_pro_xl
        data:
          title: "Pet detected - {{ room }}"
          message: "{{ now().strftime('%-I:%M %p on %b %-d') }}"
          data:
            image: "{{ url }}"
            tag: "pet-{{ slug }}"
            importance: low
            sticky: true

