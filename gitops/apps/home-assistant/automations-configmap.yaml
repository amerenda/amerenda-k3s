apiVersion: v1
kind: ConfigMap
metadata:
  name: homeassistant-automations
  namespace: home-assistant
data:
  alex_ac_auto_cool_away.yaml: |
    alias: Alex - AC Auto Cool (Away)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.midea_ac
        attribute: current_temperature
        above: 30
        for: "00:05:00"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.midea_ac','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.midea_ac }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.midea_ac }
        data: { temperature: 27 }

  alex_ac_auto_cool_home.yaml: |
    alias: Alex - AC Auto Cool (Home)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.midea_ac
        attribute: current_temperature
        above: 26
        for: "00:05:00"
    conditions:
      - condition: state
        entity_id: person.alex_merenda
        state: "home"
      - condition: template
        value_template: "{{ state_attr('climate.midea_ac','hvac_mode') != 'cool' }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.midea_ac }
        data: { hvac_mode: cool }
      - action: climate.set_temperature
        target: { entity_id: climate.midea_ac }
        data: { temperature: 24 }

  alex_ac_cool_off_hysteresis.yaml: |
    alias: Alex - AC Cool Off (Hysteresis)
    mode: restart
    triggers:
      - trigger: numeric_state
        entity_id: climate.midea_ac
        attribute: current_temperature
        below: 23
        for: "00:03:00"
    conditions:
      - condition: template
        value_template: "{{ is_state_attr('climate.midea_ac','hvac_mode','cool') }}"
    actions:
      - action: climate.set_hvac_mode
        target: { entity_id: climate.midea_ac }
        data: { hvac_mode: "off" }

  alex_night_lighting_on_toggle.yaml: |
    alias: Alex - Night Lighting on Toggle
    mode: parallel
    triggers:
      - trigger: state
        entity_id:
          - light.living_room
          - light.bathroom
          - light.bedroom
          - light.hallway
          - light.kitchen
        from: "off"
        to: "on"
    variables:
      is_past_cutoff: >
        {% set wd = now().weekday() %}  {# Mon=0..Sun=6 #}
        {% if wd in [4,5] %}
          {{ now().time() >= strptime('01:00','%H:%M').time() }}
        {% else %}
          {{ now().time() >= strptime('23:00','%H:%M').time() }}
        {% endif %}
      color_lights: [ 'light.living_room','light.bathroom','light.bedroom' ]
      is_color_light: "{{ trigger.entity_id in color_lights }}"
    conditions:
      - condition: template
        value_template: "{{ is_past_cutoff }}"
    actions:
      - choose:
          - conditions: "{{ is_color_light }}"
            sequence:
              - action: light.turn_on
                target: { entity_id: "{{ trigger.entity_id }}" }
                data:
                  brightness_pct: 10
                  rgb_color: [255, 0, 0]
                  transition: 1
          - conditions: "{{ not is_color_light }}"
            sequence:
              - action: light.turn_on
                target: { entity_id: "{{ trigger.entity_id }}" }
                data:
                  brightness_pct: 10
                  color_temp_kelvin: 2000
                  transition: 1

  alex_reolink_human_detect_alert.yaml: |
    alias: Alex - Reolink Human Alert (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_cam_person
          - binary_sensor.bedroom_cam_person
          - binary_sensor.kitchen_cam_person
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_cam_person':
              {'camera': 'camera.living_room_cam','room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_cam_person':
              {'camera': 'camera.bedroom_cam',    'room':'Bedroom',    'slug':'bedroom'},
            'binary_sensor.kitchen_cam_person':
              {'camera': 'camera.kitchen_cam',    'room':'Kitchen',    'slug':'kitchen'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      path: "/config/www/intruders/{{ slug }}.jpg"
      url: "/local/intruders/{{ slug }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: notify.mobile_app_pixel_9_pro_xl
        data:
          title: "Human detected - {{ room }}"
          message: "{{ now().strftime('%-I:%M %p on %b %-d') }}"
          data:
            image: "{{ url }}"
            tag: "human-{{ slug }}"
            importance: high
            sticky: true

  alex_reolink_pet_detect_snapshot.yaml: |
    alias: Alex - Reolink Pet Snapshot (Away)
    mode: queued
    triggers:
      - trigger: state
        entity_id:
          - binary_sensor.living_room_cam_pet
          - binary_sensor.bedroom_cam_pet
          - binary_sensor.kitchen_cam_pet
        from: "off"
        to: "on"
    conditions:
      - condition: not
        conditions:
          - condition: state
            entity_id: person.alex_merenda
            state: "home"
    variables:
      CAM_MAP: >
        {{
          {
            'binary_sensor.living_room_cam_pet':
              {'camera': 'camera.living_room_cam', 'room':'Living Room','slug':'living_room'},
            'binary_sensor.bedroom_cam_pet':
              {'camera': 'camera.bedroom_cam',     'room':'Bedroom',    'slug':'bedroom'},
            'binary_sensor.kitchen_cam_pet':
              {'camera': 'camera.kitchen_cam',     'room':'Kitchen',    'slug':'kitchen'}
          }
        }}
      cam: "{{ CAM_MAP[trigger.entity_id]['camera'] }}"
      room: "{{ CAM_MAP[trigger.entity_id]['room'] }}"
      slug: "{{ CAM_MAP[trigger.entity_id]['slug'] }}"
      path: "/config/www/pets/{{ slug }}.jpg"
      url: "/local/pets/{{ slug }}.jpg"
    actions:
      - action: camera.snapshot
        target: { entity_id: "{{ cam }}" }
        data:
          filename: "{{ path }}"
      - action: input_text.set_value
        target: { entity_id: input_text.pet_last_seen_room }
        data: { value: "{{ room }}" }
      - action: input_datetime.set_datetime
        target: { entity_id: input_datetime.pet_last_seen_time }
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - action: input_text.set_value
        target: { entity_id: input_text.pet_last_image_url }
        data: { value: "{{ url }}" }

