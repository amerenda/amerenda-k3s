blueprint:
  name: Hue - Switch Control (Multi-Schedule)
  description: >
    Control Hue lights with a Hue switch/dimmer. Supports:
    - Button 1: Toggle lights on/off with time-based scene scheduling (5 time windows)
    - Button 2: Brightness up
    - Button 3: Brightness down  
    - Button 4: Custom action (default: scene cycle)
    - Time-based scenes: Configure different scenes for morning, day, evening, night, and late night
  domain: automation
  input:
    target_lights:
      name: Target lights
      description: Lights to control with this switch
      selector:
        entity:
          domain: light
          multiple: true
    
    switch_entity:
      name: Hue switch event entity
      description: e.g. event.living_room_switch_button_1
      selector:
        entity:
          domain: event
    
    # Button 1: Toggle
    button_1_toggle:
      name: Button 1 - Toggle lights
      description: Enable toggle on/off for button 1
      default: true
      selector:
        boolean: {}
    
    # Button 2: Brightness up
    button_2_brightness_up:
      name: Button 2 - Brightness up
      description: Enable brightness up for button 2
      default: true
      selector:
        boolean: {}
    
    brightness_step:
      name: Brightness step
      description: How much to increase/decrease brightness
      default: 25
      selector:
        number:
          min: 1
          max: 100
          step: 1
    
    # Button 3: Brightness down
    button_3_brightness_down:
      name: Button 3 - Brightness down
      description: Enable brightness down for button 3
      default: true
      selector:
        boolean: {}
    
    # Button 4: Custom action
    button_4_custom:
      name: Button 4 - Custom action
      description: Enable custom action for button 4
      default: true
      selector:
        boolean: {}
    
    button_4_action:
      name: Button 4 - Action type
      description: What action to perform on button 4
      default: scene_cycle
      selector:
        select:
          options:
            - scene_cycle
            - scene_next
            - scene_previous
            - color_cycle
            - custom_service
    
    # Long press actions
    button_1_long_press:
      name: Button 1 - Long press action
      description: Enable long press action for button 1
      default: true
      selector:
        boolean: {}
    
    button_1_long_action:
      name: Button 1 - Long press action type
      description: What action to perform on button 1 long press
      default: all_lights_off
      selector:
        select:
          options:
            - all_lights_off
            - custom_service
    
    button_4_long_press:
      name: Button 4 - Long press action
      description: Enable long press action for button 4
      default: true
      selector:
        boolean: {}
    
    button_4_long_action:
      name: Button 4 - Long press action type
      description: What action to perform on button 4 long press
      default: room_relax_scene
      selector:
        select:
          options:
            - room_relax_scene
            - custom_service
    
    # Long press scene
    room_relax_scene:
      name: Room relax scene
      description: Scene to activate on button 4 long press (e.g. scene.living_room_relax)
      default: ""
      selector:
        entity:
          domain: scene
    
    # Scene cycling options
    scene_entities:
      name: Scenes to cycle through
      description: List of scenes to cycle through (for scene_cycle/next/previous)
      default: []
      selector:
        entity:
          domain: scene
          multiple: true
    
    # Custom service for button 4
    custom_service:
      name: Custom service (when action = custom_service)
      description: Service to call for button 4 custom action
      default: ""
      selector:
        text: {}
    
    custom_service_data:
      name: Custom service data
      description: Data to pass to custom service (YAML format)
      default: "{}"
      selector:
        text: {}
    
    # Brightness limits
    min_brightness:
      name: Minimum brightness
      description: Minimum brightness level (1-255)
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
    
    max_brightness:
      name: Maximum brightness
      description: Maximum brightness level (1-255)
      default: 255
      selector:
        number:
          min: 1
          max: 255
          step: 1

    # Room name for scene construction
    room_name:
      name: Room name
      description: "Room name for scene construction (e.g., 'living_room', 'kitchen')"
      default: "living_room"
      selector:
        text: {}

    # Use dashboard-editable schedule (optional override)
    use_dashboard_schedule:
      name: Use dashboard schedule
      description: "Use dashboard-editable schedule instead of hardcoded values"
      default: true
      selector:
        boolean: {}

mode: restart
max_exceeded: silent

variables:
  target_lights: !input target_lights
  switch_entity: !input switch_entity
  button_1_toggle: !input button_1_toggle
  button_2_brightness_up: !input button_2_brightness_up
  button_3_brightness_down: !input button_3_brightness_down
  button_4_custom: !input button_4_custom
  button_4_action: !input button_4_action
  button_1_long_press: !input button_1_long_press
  button_1_long_action: !input button_1_long_action
  button_4_long_press: !input button_4_long_press
  button_4_long_action: !input button_4_long_action
  room_relax_scene: !input room_relax_scene
  scene_entities: !input scene_entities
  custom_service: !input custom_service
  custom_service_data: !input custom_service_data
  brightness_step: !input brightness_step
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  room_name: !input room_name
  use_dashboard_schedule: !input use_dashboard_schedule

trigger:
  - platform: event
    event_type: hue_event

condition:
  - condition: template
    value_template: >
      {% set entity_name = switch_entity.split('.')[-1] %}
      {% if entity_name.endswith('_button_1') %}
        {% set expected_id = entity_name.replace('_button_1', '_button') %}
      {% elif entity_name.endswith('_button_2') %}
        {% set expected_id = entity_name.replace('_button_2', '_button') %}
      {% elif entity_name.endswith('_button_3') %}
        {% set expected_id = entity_name.replace('_button_3', '_button') %}
      {% elif entity_name.endswith('_button_4') %}
        {% set expected_id = entity_name.replace('_button_4', '_button') %}
      {% else %}
        {% set expected_id = entity_name %}
      {% endif %}
      {{ trigger.event.data.id == expected_id }}

action:
  - choose:
      # Button 1: Toggle lights (short press)
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 1 }}"
          - condition: template
            value_template: "{{ button_1_toggle }}"
        sequence:
          - choose:
              # Time-based scene mode: Turn on with appropriate scene based on current time
              - conditions:
                  - condition: template
                    value_template: "{{ states('input_boolean.' + room_name + '_schedule_enabled') == 'on' and not is_state(target_lights[0], 'on') }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: >
                        {% set now_time = now().strftime('%H:%M') %}
                        {% set current_scene = '' %}
                        {% set room = room_name %}
                        
                        {% if use_dashboard_schedule %}
                          {% set s1_start = states('input_datetime.' + room + '_schedule_1_start') %}
                          {% set s1_end = states('input_datetime.' + room + '_schedule_1_end') %}
                          {% set s1_scene = states('input_select.' + room + '_schedule_1_scene') %}
                          {% set s2_start = states('input_datetime.' + room + '_schedule_2_start') %}
                          {% set s2_end = states('input_datetime.' + room + '_schedule_2_end') %}
                          {% set s2_scene = states('input_select.' + room + '_schedule_2_scene') %}
                          {% set s3_start = states('input_datetime.' + room + '_schedule_3_start') %}
                          {% set s3_end = states('input_datetime.' + room + '_schedule_3_end') %}
                          {% set s3_scene = states('input_select.' + room + '_schedule_3_scene') %}
                          {% set s4_start = states('input_datetime.' + room + '_schedule_4_start') %}
                          {% set s4_end = states('input_datetime.' + room + '_schedule_4_end') %}
                          {% set s4_scene = states('input_select.' + room + '_schedule_4_scene') %}
                          {% set s5_start = states('input_datetime.' + room + '_schedule_5_start') %}
                          {% set s5_end = states('input_datetime.' + room + '_schedule_5_end') %}
                          {% set s5_scene = states('input_select.' + room + '_schedule_5_scene') %}
                          {% set default_scene = states('input_select.' + room + '_default_scene') %}
                        {% else %}
                          {% set s1_start = '06:00' %}
                          {% set s1_end = '09:00' %}
                          {% set s1_scene = 'energize' %}
                          {% set s2_start = '09:00' %}
                          {% set s2_end = '17:00' %}
                          {% set s2_scene = 'day' %}
                          {% set s3_start = '17:00' %}
                          {% set s3_end = '21:00' %}
                          {% set s3_scene = 'relax' %}
                          {% set s4_start = '21:00' %}
                          {% set s4_end = '23:00' %}
                          {% set s4_scene = 'nightlight' %}
                          {% set s5_start = '23:00' %}
                          {% set s5_end = '06:00' %}
                          {% set s5_scene = 'nightlight' %}
                          {% set default_scene = 'relax' %}
                        {% endif %}
                        
                        {% if s1_scene != 'unknown' %}
                          {% if s1_start <= s1_end %}
                            {% if now_time >= s1_start and now_time <= s1_end %}
                              {% set current_scene = 'scene.' + room + '_' + s1_scene %}
                            {% endif %}
                          {% else %}
                            {% if now_time >= s1_start or now_time <= s1_end %}
                              {% set current_scene = 'scene.' + room + '_' + s1_scene %}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                        
                        {% if current_scene == '' and s2_scene != 'unknown' %}
                          {% if s2_start <= s2_end %}
                            {% if now_time >= s2_start and now_time <= s2_end %}
                              {% set current_scene = 'scene.' + room + '_' + s2_scene %}
                            {% endif %}
                          {% else %}
                            {% if now_time >= s2_start or now_time <= s2_end %}
                              {% set current_scene = 'scene.' + room + '_' + s2_scene %}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                        
                        {% if current_scene == '' and s3_scene != 'unknown' %}
                          {% if s3_start <= s3_end %}
                            {% if now_time >= s3_start and now_time <= s3_end %}
                              {% set current_scene = 'scene.' + room + '_' + s3_scene %}
                            {% endif %}
                          {% else %}
                            {% if now_time >= s3_start or now_time <= s3_end %}
                              {% set current_scene = 'scene.' + room + '_' + s3_scene %}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                        
                        {% if current_scene == '' and s4_scene != 'unknown' %}
                          {% if s4_start <= s4_end %}
                            {% if now_time >= s4_start and now_time <= s4_end %}
                              {% set current_scene = 'scene.' + room + '_' + s4_scene %}
                            {% endif %}
                          {% else %}
                            {% if now_time >= s4_start or now_time <= s4_end %}
                              {% set current_scene = 'scene.' + room + '_' + s4_scene %}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                        
                        {% if current_scene == '' and s5_scene != 'unknown' %}
                          {% if s5_start <= s5_end %}
                            {% if now_time >= s5_start and now_time <= s5_end %}
                              {% set current_scene = 'scene.' + room + '_' + s5_scene %}
                            {% endif %}
                          {% else %}
                            {% if now_time >= s5_start or now_time <= s5_end %}
                              {% set current_scene = 'scene.' + room + '_' + s5_scene %}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                        
                        {% if current_scene == '' %}
                          {% set current_scene = 'scene.' + room + '_' + default_scene %}
                        {% endif %}
                        
                        {{ current_scene }}
              # All other cases: Simple toggle (when lights are already on or no time schedule)
              - conditions:
                  - condition: template
                    value_template: "{{ states('input_boolean.' + room_name + '_schedule_enabled') != 'on' or is_state(target_lights[0], 'on') }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_lights
      
      # Button 1: Long press action
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 1 }}"
          - condition: template
            value_template: "{{ button_1_long_press }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ button_1_long_action == 'all_lights_off' }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: light.home
              - conditions:
                  - condition: template
                    value_template: "{{ button_1_long_action == 'custom_service' and custom_service != '' }}"
                sequence:
                  - service: "{{ custom_service }}"
                    target:
                      entity_id: !input target_lights
                    data: "{{ custom_service_data }}"
      
      # Button 2: Brightness up
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 2 }}"
          - condition: template
            value_template: "{{ button_2_brightness_up }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_lights
            data:
              brightness: >
                {% set current = state_attr(target_lights[0], 'brightness') | int %}
                {% set new = current + brightness_step %}
                {% if new > max_brightness %}{{ max_brightness }}{% else %}{{ new }}{% endif %}
      
      # Button 3: Brightness down
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 3 }}"
          - condition: template
            value_template: "{{ button_3_brightness_down }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_lights
            data:
              brightness: >
                {% set current = state_attr(target_lights[0], 'brightness') | int %}
                {% set new = current - brightness_step %}
                {% if new < min_brightness %}{{ min_brightness }}{% else %}{{ new }}{% endif %}
      
      # Button 4: Custom action
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 4 }}"
          - condition: template
            value_template: "{{ button_4_custom }}"
        sequence:
          - choose:
              # Scene cycle
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_action == 'scene_cycle' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: >
                        {% set current_time = now().timestamp() %}
                        {% set scene_index = (current_time | int) % scene_entities|length %}
                        {{ scene_entities[scene_index] if scene_entities else '' }}
              
              # Scene next
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_action == 'scene_next' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: >
                        {% set current_time = now().timestamp() %}
                        {% set scene_index = (current_time | int) % scene_entities|length %}
                        {{ scene_entities[scene_index] if scene_entities else '' }}
              
              # Scene previous
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_action == 'scene_previous' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ scene_entities[2] if scene_entities|length > 2 else scene_entities[0] if scene_entities else '' }}"
              
              # Color cycle
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_action == 'color_cycle' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      hs_color: [0, 100]  # Red
              
              # Custom service
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_action == 'custom_service' and custom_service != '' }}"
                sequence:
                  - service: "{{ custom_service }}"
                    target:
                      entity_id: !input target_lights
                    data: "{{ custom_service_data }}"
      
      # Button 4: Long press action
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 4 }}"
          - condition: template
            value_template: "{{ button_4_long_press }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_long_action == 'room_relax_scene' and room_relax_scene != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ room_relax_scene }}"
              - conditions:
                  - condition: template
                    value_template: "{{ button_4_long_action == 'custom_service' and custom_service != '' }}"
                sequence:
                  - service: "{{ custom_service }}"
                    target:
                      entity_id: !input target_lights
                    data: "{{ custom_service_data }}"
