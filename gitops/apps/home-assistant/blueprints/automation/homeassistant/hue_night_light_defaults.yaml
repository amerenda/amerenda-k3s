blueprint:
  name: Hue - Night Light Defaults
  description: >
    Apply night light defaults to Hue lights when the light turns ON during the
    configured night window. Designed to work with the Hue Switch Control blueprint.
    Focuses on night light settings with warm colors and low brightness.
    Note: Switch events are not handled here. Use hue_switch_control.yaml for switch->on logic.
  domain: automation
  input:
    target_lights:
      name: Target lights
      selector:
        entity:
          domain: light
          multiple: true
    only_when_manual:
      name: Only when manual (for light-on trigger)
      description: Skip when HA turned the light on (context.user_id is none)
      default: true
      selector:
        boolean: {}

    settle_seconds:
      name: Settle seconds (for light-on trigger)
      description: "Use >= 1s to avoid race with Hue bridge updates"
      default: 1
      selector:
        number:
          min: 1
          max: 5
          step: 1
          unit_of_measurement: s

    night_start_time:
      name: Night start time
      description: "Time when night mode should start (24-hour format)"
      default: "23:00"
      selector:
        time: {}

    night_end_time:
      name: Night end time
      description: "Time when night mode should end (24-hour format)"
      default: "05:45"
      selector:
        time: {}

    color_mode:
      name: Color mode
      description: "Pick 'scene' to call a Hue/HA scene (prevents flash)."
      default: scene
      selector:
        select:
          options:
            - scene
            - color_temp
            - hs

    # Scene mode inputs
    scene_entity:
      name: Scene entity (when color_mode = scene)
      description: "e.g. scene.living_room_night_red (must exist in HA)"
      default: ""
      selector:
        entity:
          domain: scene

    # Color temp inputs
    color_temp_mireds:
      name: Color Temp (mireds)
      default: 500
      description: "Higher values = warmer light (good for night)"
      selector:
        number:
          min: 153
          max: 500
          step: 1

    # HS inputs
    hs_hue:
      name: HS - Hue (0-360)
      default: 30
      description: "Warm orange/red hue for night light"
      selector:
        number:
          min: 0
          max: 360
          step: 1
    hs_sat:
      name: HS - Saturation (0-100)
      default: 20
      description: "Lower saturation for softer night light"
      selector:
        number:
          min: 0
          max: 100
          step: 1

    transition_secs:
      name: Transition (seconds)
      default: 1.0
      description: "Slower transition for night light"
      selector:
        number:
          min: 0
          max: 5
          step: 0.1

    brightness:
      name: Brightness (1-255)
      default: 50
      description: "Low brightness for night light"
      selector:
        number:
          min: 1
          max: 255
          step: 1

mode: restart
max_exceeded: silent

variables:
  only_when_manual: !input only_when_manual
  night_start_time: !input night_start_time
  night_end_time: !input night_end_time
  color_mode: !input color_mode
  brightness: !input brightness
  color_temp_mireds: !input color_temp_mireds
  hs_hue: !input hs_hue
  hs_sat: !input hs_sat
  transition_secs: !input transition_secs
  scene_entity: !input scene_entity

trigger:
  - id: light_on
    platform: state
    entity_id: !input target_lights
    to: "on"
    for:
      seconds: !input settle_seconds

condition:
  - condition: template
    value_template: >
      {% set now_time = now().strftime('%H:%M') %}
      {% if night_start_time <= night_end_time %}
        {{ now_time >= night_start_time and now_time <= night_end_time }}
      {% else %}
        {{ now_time >= night_start_time or now_time <= night_end_time }}
      {% endif %}

action:
  - choose:
      # A) Light turned ON (usually manual/Hue)
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'light_on' }}"
          - condition: template
            alias: "If only_when_manual, require external (non-HA) turn-on"
            value_template: >
              {% if not only_when_manual %} true
              {% else %} {{ trigger.to_state.context.user_id is none }}
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'scene' and scene_entity != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ scene_entity }}"
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'color_temp' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      color_temp: "{{ color_temp_mireds | int }}"
                      transition: 0
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'hs' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                      transition: 0