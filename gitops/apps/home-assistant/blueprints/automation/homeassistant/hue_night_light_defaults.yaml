blueprint:
  name: Hue - Night Light Defaults
  description: >
    Apply night light defaults to Hue lights when:
    1) the light turns ON (manual via Hue), or
    2) a Hue switch event entity fires.
    Designed to work with the Hue Switch Control blueprint.
    Focuses on night light settings with warm colors and low brightness.
  domain: automation
  input:
    target_lights:
      name: Target lights
      selector:
        entity:
          domain: light
          multiple: true
    switch_events:
      name: Hue switch event entities
      description: e.g. event.living_room_switch_button_1
      selector:
        entity:
          domain: event
          multiple: true
    only_when_manual:
      name: Only when manual (for light-on trigger)
      description: Skip when HA turned the light on (context.user_id is none)
      default: true
      selector:
        boolean: {}

    settle_seconds:
      name: Settle seconds (for light-on trigger)
      description: "Use >= 1s to avoid race with Hue bridge updates"
      default: 1
      selector:
        number:
          min: 1
          max: 5
          step: 1
          unit_of_measurement: s

    event_states:
      name: Switch event states to react to
      default: [initial_press, short_release]
      selector:
        select:
          multiple: true
          options:
            - initial_press
            - short_release
            - repeat
            - long_release

    switch_control_delay:
      name: Switch control delay
      description: "Delay after switch events to let switch control blueprint handle first (seconds)"
      default: 0.3
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          unit_of_measurement: s

    night_start_time:
      name: Night start time
      description: "Time when night mode should start (24-hour format)"
      default: "17:00"
      selector:
        time: {}

    night_end_time:
      name: Night end time
      description: "Time when night mode should end (24-hour format)"
      default: "07:00"
      selector:
        time: {}

    color_mode:
      name: Color mode
      description: "Pick 'scene' to call a Hue/HA scene (prevents flash)."
      default: color_temp
      selector:
        select:
          options:
            - color_temp
            - hs
            - scene

    # Scene mode inputs
    scene_entity:
      name: Scene entity (when color_mode = scene)
      description: "e.g. scene.living_room_night_red (must exist in HA)"
      default: ""
      selector:
        entity:
          domain: scene

    # Color temp inputs
    color_temp_mireds:
      name: Color Temp (mireds)
      default: 500
      description: "Higher values = warmer light (good for night)"
      selector:
        number:
          min: 153
          max: 500
          step: 1

    # HS inputs
    hs_hue:
      name: HS - Hue (0-360)
      default: 30
      description: "Warm orange/red hue for night light"
      selector:
        number:
          min: 0
          max: 360
          step: 1
    hs_sat:
      name: HS - Saturation (0-100)
      default: 20
      description: "Lower saturation for softer night light"
      selector:
        number:
          min: 0
          max: 100
          step: 1

    transition_secs:
      name: Transition (seconds)
      default: 1.0
      description: "Slower transition for night light"
      selector:
        number:
          min: 0
          max: 5
          step: 0.1

    brightness:
      name: Brightness (1-255)
      default: 50
      description: "Low brightness for night light"
      selector:
        number:
          min: 1
          max: 255
          step: 1

mode: restart
max_exceeded: silent

variables:
  only_when_manual: !input only_when_manual
  event_states: !input event_states
  switch_control_delay: !input switch_control_delay
  night_start_time: !input night_start_time
  night_end_time: !input night_end_time
  color_mode: !input color_mode
  brightness: !input brightness
  color_temp_mireds: !input color_temp_mireds
  hs_hue: !input hs_hue
  hs_sat: !input hs_sat
  transition_secs: !input transition_secs
  scene_entity: !input scene_entity

trigger:
  - id: light_on
    platform: state
    entity_id: !input target_lights
    to: "on"
    for:
      seconds: !input settle_seconds

  - id: switch_event
    platform: event
    event_type: hue_event

condition:
  - condition: template
    value_template: >
      {% if trigger.id == 'light_on' %}
        true
      {% else %}
        {% set switch_entity_names = switch_events | map('split', '.') | map('last') | list %}
        {% set entity_name = trigger.event.data.id %}
        {% if entity_name in switch_entity_names %}
          {{ trigger.event.data.type in event_states }}
        {% else %}
          false
        {% endif %}
      {% endif %}
  - condition: time
    after: "{{ night_start_time }}"
    before: "{{ night_end_time }}"

action:
  - choose:
      # A) Light turned ON (usually manual/Hue)
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'light_on' }}"
          - condition: template
            alias: "If only_when_manual, require external (non-HA) turn-on"
            value_template: >
              {% if not only_when_manual %} true
              {% else %} {{ trigger.to_state.context.user_id is none }}
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'scene' and scene_entity != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ scene_entity }}"
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'color_temp' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      color_temp: "{{ color_temp_mireds | int }}"
                      transition: 0
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'hs' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                      transition: 0

      # B) Hue switch event fired
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'switch_event' }}"
        sequence:
          - delay:
              seconds: "{{ switch_control_delay | float }}"  # let switch control blueprint handle first
          - condition: template
            value_template: >
              {% for light in target_lights %}
                {% if is_state(light, 'on') %}
                  {{ true }}
                {% endif %}
              {% endfor %}
              {{ false }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'scene' and scene_entity != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ scene_entity }}"
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'color_temp' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      color_temp: "{{ color_temp_mireds | int }}"
                      transition: 0
              - conditions:
                  - condition: template
                    value_template: "{{ color_mode == 'hs' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_lights
                    data:
                      brightness: "{{ brightness | int }}"
                      hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                      transition: 0