apiVersion: v1
kind: ConfigMap
metadata:
  name: ha-blueprints-defaults
  namespace: home-assistant
  annotations:
    reloader.stakater.com/auto: "true"
data:
  room_schedule_generator.yaml: |
    blueprint:
      name: "Room Schedule Generator"
      description: "Dynamically generates schedule entities for any room"
      domain: automation
      input:
        room_name:
          name: "Room Name"
          description: "Name of the room (e.g., living_room, kitchen)"
          selector:
            text:
        room_display_name:
          name: "Room Display Name"
          description: "Display name for the room (e.g., Living Room, Kitchen)"
          selector:
            text:
        room_icon:
          name: "Room Icon"
          description: "Icon for the room"
          default: "mdi:home"
          selector:
            icon:
        enable_switch_config:
          name: "Enable Switch Configuration"
          description: "Include switch configuration entities"
          default: true
          selector:
            boolean:
        enable_motion_sensors:
          name: "Enable Motion Sensors"
          description: "Include motion sensor configuration"
          default: false
          selector:
            boolean:
    
    script:
      room_schedule_generator:
        alias: "Generate {{ room_display_name }} Schedule"
        fields:
          room_name:
            description: "Room name for entity generation"
            example: "living_room"
          room_display_name:
            description: "Display name for the room"
            example: "Living Room"
          room_icon:
            description: "Icon for the room"
            example: "mdi:sofa"
          enable_switch_config:
            description: "Whether to include switch configuration"
            example: true
          enable_motion_sensors:
            description: "Whether to include motion sensor configuration"
            example: false
        sequence:
          - service: system_log.write
            data:
              message: "Generating schedule configuration for {{ room_display_name }}"
              level: info
          
          # Generate input_boolean entities
          - service: input_boolean.set
            data:
              entity_id: "input_boolean.{{ room_name }}_schedule_enabled"
              value: true
          
          # Generate input_datetime entities for each schedule period
          - repeat:
              for_each: [1, 2, 3, 4, 5]
              sequence:
                - service: input_datetime.set_datetime
                  data:
                    entity_id: "input_datetime.{{ room_name }}_schedule_{{ repeat.item }}_start"
                    time: "{{ ['06:00', '09:00', '17:00', '21:00', '23:00'][repeat.item - 1] }}"
                - service: input_datetime.set_datetime
                  data:
                    entity_id: "input_datetime.{{ room_name }}_schedule_{{ repeat.item }}_end"
                    time: "{{ ['09:00', '17:00', '21:00', '23:00', '06:00'][repeat.item - 1] }}"
          
          # Generate input_select entities for scenes
          - repeat:
              for_each: [1, 2, 3, 4, 5]
              sequence:
                - service: input_select.select_option
                  data:
                    entity_id: "input_select.{{ room_name }}_schedule_{{ repeat.item }}_scene"
                    option: "{{ ['energize', 'concentrate', 'relax', 'nightlight', 'nightlight'][repeat.item - 1] }}"
          
          # Generate default scene
          - service: input_select.select_option
            data:
              entity_id: "input_select.{{ room_name }}_default_scene"
              option: "relax"
          
          # Generate custom scene text inputs
          - repeat:
              for_each: [1, 2, 3, 4, 5]
              sequence:
                - service: input_text.set_value
                  data:
                    entity_id: "input_text.{{ room_name }}_schedule_{{ repeat.item }}_custom_scene"
                    value: ""
          
          - service: input_text.set_value
            data:
              entity_id: "input_text.{{ room_name }}_default_custom_scene"
              value: ""
          
          # Generate switch configuration if enabled
          - if:
              condition:
                condition: template
                value_template: "{{ enable_switch_config }}"
            then:
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_switch_brightness_step"
                  option: "25"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_switch_min_brightness"
                  option: "1"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_switch_max_brightness"
                  option: "255"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_1_short"
                  option: "toggle_lights"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_1_long"
                  option: "all_lights_off"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_2_short"
                  option: "brightness_up"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_3_short"
                  option: "brightness_down"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_4_short"
                  option: "scene_cycle"
              - service: input_select.select_option
                data:
                  entity_id: "input_select.{{ room_name }}_button_4_long"
                  option: "room_relax_scene"
          
          - service: system_log.write
            data:
              message: "Schedule configuration generated for {{ room_display_name }}"
              level: info

  room_schedule_config.yaml: |
    blueprint:
      name: "Room Schedule Configuration"
      description: "Creates per-room schedule input helpers for time-based scene selection"
      domain: automation
      input:
        room_name:
          name: "Room Name"
          description: "Name of the room (e.g., living_room, kitchen, bedroom)"
          selector:
            text:
        room_display_name:
          name: "Room Display Name"
          description: "Display name for the room (e.g., Living Room, Kitchen, Bedroom)"
          selector:
            text:
        enable_schedule:
          name: "Enable Schedule for Room"
          description: "Whether to enable time-based scheduling for this room"
          default: true
          selector:
            boolean:
        morning_start:
          name: "Morning Start Time"
          description: "Start time for morning schedule"
          default: "06:00"
          selector:
            time:
        morning_end:
          name: "Morning End Time"
          description: "End time for morning schedule"
          default: "09:00"
          selector:
            time:
        morning_scene:
          name: "Morning Scene Type"
          description: "Scene type for morning period"
          default: "energize"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        morning_custom_scene:
          name: "Morning Custom Scene"
          description: "Custom scene name for morning period (only used if Morning Scene Type is 'custom')"
          default: ""
          selector:
            text:
        day_start:
          name: "Day Start Time"
          description: "Start time for day schedule"
          default: "09:00"
          selector:
            time:
        day_end:
          name: "Day End Time"
          description: "End time for day schedule"
          default: "17:00"
          selector:
            time:
        day_scene:
          name: "Day Scene Type"
          description: "Scene type for day period"
          default: "concentrate"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        day_custom_scene:
          name: "Day Custom Scene"
          description: "Custom scene name for day period (only used if Day Scene Type is 'custom')"
          default: ""
          selector:
            text:
        evening_start:
          name: "Evening Start Time"
          description: "Start time for evening schedule"
          default: "17:00"
          selector:
            time:
        evening_end:
          name: "Evening End Time"
          description: "End time for evening schedule"
          default: "21:00"
          selector:
            time:
        evening_scene:
          name: "Evening Scene Type"
          description: "Scene type for evening period"
          default: "relax"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        evening_custom_scene:
          name: "Evening Custom Scene"
          description: "Custom scene name for evening period (only used if Evening Scene Type is 'custom')"
          default: ""
          selector:
            text:
        night_start:
          name: "Night Start Time"
          description: "Start time for night schedule"
          default: "21:00"
          selector:
            time:
        night_end:
          name: "Night End Time"
          description: "End time for night schedule"
          default: "23:00"
          selector:
            time:
        night_scene:
          name: "Night Scene Type"
          description: "Scene type for night period"
          default: "nightlight"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        night_custom_scene:
          name: "Night Custom Scene"
          description: "Custom scene name for night period (only used if Night Scene Type is 'custom')"
          default: ""
          selector:
            text:
        late_night_start:
          name: "Late Night Start Time"
          description: "Start time for late night schedule"
          default: "23:00"
          selector:
            time:
        late_night_end:
          name: "Late Night End Time"
          description: "End time for late night schedule"
          default: "06:00"
          selector:
            time:
        late_night_scene:
          name: "Late Night Scene Type"
          description: "Scene type for late night period"
          default: "nightlight"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        late_night_custom_scene:
          name: "Late Night Custom Scene"
          description: "Custom scene name for late night period (only used if Late Night Scene Type is 'custom')"
          default: ""
          selector:
            text:
        default_scene:
          name: "Default Scene Type"
          description: "Default scene type when schedule is disabled"
          default: "relax"
          selector:
            select:
              options:
                - "energize"
                - "concentrate"
                - "relax"
                - "nightlight"
                - "read"
                - "dimmed"
                - "custom"
        default_custom_scene:
          name: "Default Custom Scene"
          description: "Custom scene name for default (only used if Default Scene Type is 'custom')"
          default: ""
          selector:
            text:
    
    # This blueprint doesn't create an automation, it's used to generate input helpers
    # The actual automation logic is handled by the switch control blueprint

  hue_switch_control.yaml: |
    blueprint:
      name: Hue - Switch Control (Multi-Schedule)
      description: >
        Control Hue lights with a Hue switch/dimmer. Supports:
        - Button 1: Toggle lights on/off with time-based scene scheduling (5 time windows)
        - Button 2: Brightness up
        - Button 3: Brightness down  
        - Button 4: Custom action (default: scene cycle)
        - Time-based scenes: Configure different scenes for morning, day, evening, night, and late night
      domain: automation
      input:
        target_lights:
          name: Target lights
          description: Lights to control with this switch
          selector:
            entity:
              domain: light
              multiple: true
        
        switch_entity:
          name: Hue switch event entity
          description: e.g. event.living_room_switch_button_1
          selector:
            entity:
              domain: event
        
        # Button 1: Toggle
        button_1_toggle:
          name: Button 1 - Toggle lights
          description: Enable toggle on/off for button 1
          default: true
          selector:
            boolean: {}
        
        # Button 2: Brightness up
        button_2_brightness_up:
          name: Button 2 - Brightness up
          description: Enable brightness up for button 2
          default: true
          selector:
            boolean: {}
        
        brightness_step:
          name: Brightness step
          description: How much to increase/decrease brightness
          default: 25
          selector:
            number:
              min: 1
              max: 100
              step: 1
        
        # Button 3: Brightness down
        button_3_brightness_down:
          name: Button 3 - Brightness down
          description: Enable brightness down for button 3
          default: true
          selector:
            boolean: {}
        
        # Button 4: Custom action
        button_4_custom:
          name: Button 4 - Custom action
          description: Enable custom action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_action:
          name: Button 4 - Action type
          description: What action to perform on button 4
          default: scene_cycle
          selector:
            select:
              options:
                - scene_cycle
                - scene_next
                - scene_previous
                - color_cycle
                - custom_service
        
        # Long press actions
        button_1_long_press:
          name: Button 1 - Long press action
          description: Enable long press action for button 1
          default: true
          selector:
            boolean: {}
        
        button_1_long_action:
          name: Button 1 - Long press action type
          description: What action to perform on button 1 long press
          default: all_lights_off
          selector:
            select:
              options:
                - all_lights_off
                - custom_service
        
        button_4_long_press:
          name: Button 4 - Long press action
          description: Enable long press action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_long_action:
          name: Button 4 - Long press action type
          description: What action to perform on button 4 long press
          default: room_relax_scene
          selector:
            select:
              options:
                - room_relax_scene
                - custom_service
        
        # Long press scene
        room_relax_scene:
          name: Room relax scene
          description: Scene to activate on button 4 long press (e.g. scene.living_room_relax)
          default: ""
          selector:
            entity:
              domain: scene
        
        # Scene cycling options
        scene_entities:
          name: Scenes to cycle through
          description: List of scenes to cycle through (for scene_cycle/next/previous)
          default: []
          selector:
            entity:
              domain: scene
              multiple: true
        
        # Custom service for button 4
        custom_service:
          name: Custom service (when action = custom_service)
          description: Service to call for button 4 custom action
          default: ""
          selector:
            text: {}
        
        custom_service_data:
          name: Custom service data
          description: Data to pass to custom service (YAML format)
          default: "{}"
          selector:
            text: {}
        
        # Brightness limits
        min_brightness:
          name: Minimum brightness
          description: Minimum brightness level (1-255)
          default: 1
          selector:
            number:
              min: 1
              max: 255
              step: 1
        
        max_brightness:
          name: Maximum brightness
          description: Maximum brightness level (1-255)
          default: 255
          selector:
            number:
              min: 1
              max: 255
              step: 1
    
        # Room name for scene construction
        room_name:
          name: Room name
          description: "Room name for scene construction (e.g., 'living_room', 'kitchen')"
          default: "living_room"
          selector:
            text: {}
    
        # Use dashboard-editable schedule (optional override)
        use_dashboard_schedule:
          name: Use dashboard schedule
          description: "Use dashboard-editable schedule instead of hardcoded values"
          default: true
          selector:
            boolean: {}
    
    mode: restart
    max_exceeded: silent
    
    variables:
      target_lights: !input target_lights
      switch_entity: !input switch_entity
      button_1_toggle: !input button_1_toggle
      button_2_brightness_up: !input button_2_brightness_up
      button_3_brightness_down: !input button_3_brightness_down
      button_4_custom: !input button_4_custom
      button_4_action: !input button_4_action
      button_1_long_press: !input button_1_long_press
      button_1_long_action: !input button_1_long_action
      button_4_long_press: !input button_4_long_press
      button_4_long_action: !input button_4_long_action
      room_relax_scene: !input room_relax_scene
      scene_entities: !input scene_entities
      custom_service: !input custom_service
      custom_service_data: !input custom_service_data
      brightness_step: !input brightness_step
      min_brightness: !input min_brightness
      max_brightness: !input max_brightness
      room_name: !input room_name
      use_dashboard_schedule: !input use_dashboard_schedule
    
    trigger:
      - platform: event
        event_type: hue_event
    
    condition:
      - condition: template
        value_template: >
          {% set entity_name = switch_entity.split('.')[-1] %}
          {% if entity_name.endswith('_button_1') %}
            {% set expected_id = entity_name.replace('_button_1', '_button') %}
          {% elif entity_name.endswith('_button_2') %}
            {% set expected_id = entity_name.replace('_button_2', '_button') %}
          {% elif entity_name.endswith('_button_3') %}
            {% set expected_id = entity_name.replace('_button_3', '_button') %}
          {% elif entity_name.endswith('_button_4') %}
            {% set expected_id = entity_name.replace('_button_4', '_button') %}
          {% else %}
            {% set expected_id = entity_name %}
          {% endif %}
          {{ trigger.event.data.id == expected_id }}
    
    action:
      - choose:
          # Button 1: Toggle lights (short press)
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_toggle }}"
            sequence:
              - choose:
                  # Time-based scene mode: Turn on with appropriate scene based on current time
                  - conditions:
                      - condition: template
                        value_template: "{{ states('input_boolean.' + room_name + '_schedule_enabled') == 'on' and not is_state(target_lights[0], 'on') }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set now_time = now().strftime('%H:%M') %}
                            {% set current_scene = '' %}
                            {% set room = room_name %}
                            
                            {% if use_dashboard_schedule %}
                              {% set s1_start = states('input_datetime.' + room + '_schedule_1_start') %}
                              {% set s1_end = states('input_datetime.' + room + '_schedule_1_end') %}
                              {% set s1_scene = states('input_select.' + room + '_schedule_1_scene') %}
                              {% set s2_start = states('input_datetime.' + room + '_schedule_2_start') %}
                              {% set s2_end = states('input_datetime.' + room + '_schedule_2_end') %}
                              {% set s2_scene = states('input_select.' + room + '_schedule_2_scene') %}
                              {% set s3_start = states('input_datetime.' + room + '_schedule_3_start') %}
                              {% set s3_end = states('input_datetime.' + room + '_schedule_3_end') %}
                              {% set s3_scene = states('input_select.' + room + '_schedule_3_scene') %}
                              {% set s4_start = states('input_datetime.' + room + '_schedule_4_start') %}
                              {% set s4_end = states('input_datetime.' + room + '_schedule_4_end') %}
                              {% set s4_scene = states('input_select.' + room + '_schedule_4_scene') %}
                              {% set s5_start = states('input_datetime.' + room + '_schedule_5_start') %}
                              {% set s5_end = states('input_datetime.' + room + '_schedule_5_end') %}
                              {% set s5_scene = states('input_select.' + room + '_schedule_5_scene') %}
                              {% set default_scene = states('input_select.' + room + '_default_scene') %}
                            {% else %}
                              {% set s1_start = '06:00' %}
                              {% set s1_end = '09:00' %}
                              {% set s1_scene = 'energize' %}
                              {% set s2_start = '09:00' %}
                              {% set s2_end = '17:00' %}
                              {% set s2_scene = 'day' %}
                              {% set s3_start = '17:00' %}
                              {% set s3_end = '21:00' %}
                              {% set s3_scene = 'relax' %}
                              {% set s4_start = '21:00' %}
                              {% set s4_end = '23:00' %}
                              {% set s4_scene = 'nightlight' %}
                              {% set s5_start = '23:00' %}
                              {% set s5_end = '06:00' %}
                              {% set s5_scene = 'nightlight' %}
                              {% set default_scene = 'relax' %}
                            {% endif %}
                            
                            {% if s1_scene != 'unknown' %}
                              {% if s1_start <= s1_end %}
                                {% if now_time >= s1_start and now_time <= s1_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s1_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= s1_start or now_time <= s1_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s1_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            {% if current_scene == '' and s2_scene != 'unknown' %}
                              {% if s2_start <= s2_end %}
                                {% if now_time >= s2_start and now_time <= s2_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s2_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= s2_start or now_time <= s2_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s2_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            {% if current_scene == '' and s3_scene != 'unknown' %}
                              {% if s3_start <= s3_end %}
                                {% if now_time >= s3_start and now_time <= s3_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s3_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= s3_start or now_time <= s3_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s3_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            {% if current_scene == '' and s4_scene != 'unknown' %}
                              {% if s4_start <= s4_end %}
                                {% if now_time >= s4_start and now_time <= s4_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s4_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= s4_start or now_time <= s4_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s4_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            {% if current_scene == '' and s5_scene != 'unknown' %}
                              {% if s5_start <= s5_end %}
                                {% if now_time >= s5_start and now_time <= s5_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s5_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= s5_start or now_time <= s5_end %}
                                  {% set current_scene = 'scene.' + room + '_' + s5_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            {% if current_scene == '' %}
                              {% set current_scene = 'scene.' + room + '_' + default_scene %}
                            {% endif %}
                            
                            {{ current_scene }}
                  # All other cases: Simple toggle (when lights are already on or no time schedule)
                  - conditions:
                      - condition: template
                        value_template: "{{ states('input_boolean.' + room_name + '_schedule_enabled') != 'on' or is_state(target_lights[0], 'on') }}"
                    sequence:
                      - service: light.toggle
                        target:
                          entity_id: !input target_lights
          
          # Button 1: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'all_lights_off' }}"
                    sequence:
                      - service: light.turn_off
                        target:
                          entity_id: light.home
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 2: Brightness up
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 2 }}"
              - condition: template
                value_template: "{{ button_2_brightness_up }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current + brightness_step %}
                    {% if new > max_brightness %}{{ max_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 3: Brightness down
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 3 }}"
              - condition: template
                value_template: "{{ button_3_brightness_down }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current - brightness_step %}
                    {% if new < min_brightness %}{{ min_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 4: Custom action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_custom }}"
            sequence:
              - choose:
                  # Scene cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_cycle' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene next
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_next' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene previous
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_previous' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_entities[2] if scene_entities|length > 2 else scene_entities[0] if scene_entities else '' }}"
                  
                  # Color cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'color_cycle' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input target_lights
                        data:
                          hs_color: [0, 100]  # Red
                  
                  # Custom service
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 4: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'room_relax_scene' and room_relax_scene != '' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ room_relax_scene }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"

  dashboard_room_card.yaml: |
    blueprint:
      name: "Room Schedule Card"
      description: "Generates a room schedule configuration card for the dashboard"
      domain: dashboard
      input:
        room_name:
          name: "Room Name"
          description: "Name of the room (e.g., living_room, kitchen, bedroom)"
          selector:
            text:
        room_display_name:
          name: "Room Display Name"
          description: "Display name for the room (e.g., Living Room, Kitchen, Bedroom)"
          selector:
            text:
        room_icon:
          name: "Room Icon"
          description: "Icon for the room"
          default: "mdi:home"
          selector:
            icon:
      card:
        type: vertical-stack
        title: "{{ room_display_name }} Schedule Settings"
        cards:
          - type: entities
            title: "{{ room_display_name }} Schedule Control"
            entities:
              - entity: "input_boolean.{{ room_name }}_schedule_enabled"
                name: "Enable {{ room_display_name }} Schedule"
                icon: mdi:clock-outline
          - type: entities
            title: "{{ room_display_name }} Time Settings"
            entities:
              - entity: "input_datetime.{{ room_name }}_schedule_1_start"
                name: "Morning Start"
                icon: mdi:weather-sunrise
              - entity: "input_datetime.{{ room_name }}_schedule_1_end"
                name: "Morning End"
                icon: mdi:weather-sunny
              - entity: "input_datetime.{{ room_name }}_schedule_2_start"
                name: "Day Start"
                icon: mdi:weather-sunny
              - entity: "input_datetime.{{ room_name }}_schedule_2_end"
                name: "Day End"
                icon: mdi:weather-sunset
              - entity: "input_datetime.{{ room_name }}_schedule_3_start"
                name: "Evening Start"
                icon: mdi:weather-sunset
              - entity: "input_datetime.{{ room_name }}_schedule_3_end"
                name: "Evening End"
                icon: mdi:weather-night
              - entity: "input_datetime.{{ room_name }}_schedule_4_start"
                name: "Night Start"
                icon: mdi:weather-night
              - entity: "input_datetime.{{ room_name }}_schedule_4_end"
                name: "Night End"
                icon: mdi:weather-sunrise
              - entity: "input_datetime.{{ room_name }}_schedule_5_start"
                name: "Late Night Start"
                icon: mdi:weather-sunrise
              - entity: "input_datetime.{{ room_name }}_schedule_5_end"
                name: "Late Night End"
                icon: mdi:weather-sunrise
          - type: entities
            title: "{{ room_display_name }} Scene Settings"
            entities:
              - entity: "input_select.{{ room_name }}_schedule_1_scene"
                name: "Morning Scene"
                icon: mdi:weather-sunrise
              - entity: "input_select.{{ room_name }}_schedule_2_scene"
                name: "Day Scene"
                icon: mdi:weather-sunny
              - entity: "input_select.{{ room_name }}_schedule_3_scene"
                name: "Evening Scene"
                icon: mdi:weather-sunset
              - entity: "input_select.{{ room_name }}_schedule_4_scene"
                name: "Night Scene"
                icon: mdi:weather-night
              - entity: "input_select.{{ room_name }}_schedule_5_scene"
                name: "Late Night Scene"
                icon: mdi:weather-sunrise
              - entity: "input_select.{{ room_name }}_default_scene"
                name: "Default Scene"
                icon: mdi:lightbulb
          - type: conditional
            conditions:
              - entity: input_select.room_switch_selector
                state: main_switch
            card:
              type: vertical-stack
              title: "{{ room_display_name }} Switch Configuration"
              cards:
                - type: entities
                  title: "Switch Settings"
                  entities:
                    - entity: "input_select.{{ room_name }}_switch_selector"
                      name: "Switch Type"
                      icon: mdi:light-switch
                    - entity: "input_select.{{ room_name }}_switch_brightness_step"
                      name: "Brightness Step"
                      icon: mdi:brightness-6
                    - entity: "input_select.{{ room_name }}_switch_min_brightness"
                      name: "Min Brightness"
                      icon: mdi:brightness-1
                    - entity: "input_select.{{ room_name }}_switch_max_brightness"
                      name: "Max Brightness"
                      icon: mdi:brightness-7
                - type: entities
                  title: "Button 1 (Power) Configuration"
                  entities:
                    - entity: "input_select.{{ room_name }}_button_1_short"
                      name: "Short Press"
                      icon: mdi:lightbulb-on
                    - entity: "input_select.{{ room_name }}_button_1_long"
                      name: "Long Press"
                      icon: mdi:lightbulb-off
                - type: entities
                  title: "Button 2 (Brightness Up) Configuration"
                  entities:
                    - entity: "input_select.{{ room_name }}_button_2_short"
                      name: "Short Press"
                      icon: mdi:brightness-7
                - type: entities
                  title: "Button 3 (Brightness Down) Configuration"
                  entities:
                    - entity: "input_select.{{ room_name }}_button_3_short"
                      name: "Short Press"
                      icon: mdi:brightness-1
                - type: entities
                  title: "Button 4 (Hue) Configuration"
                  entities:
                    - entity: "input_select.{{ room_name }}_button_4_short"
                      name: "Short Press"
                      icon: mdi:palette
                    - entity: "input_select.{{ room_name }}_button_4_long"
                      name: "Long Press"
                      icon: mdi:palette-outline

  motion_activated_lights.yaml: |
    blueprint:
      name: Motion Activated Lights
      description: Turn on lights with time-appropriate scenes when motion is detected
      domain: automation
      input:
        room_name:
          name: Room Name
          description: Name of the room (e.g., living_room, kitchen, bedroom, bathroom, hallway)
          selector:
            text:
        motion_sensor:
          name: Motion Sensor
          description: Entity ID of the motion sensor
          selector:
            entity:
              domain: binary_sensor
        target_lights:
          name: Target Lights
          description: List of lights to control
          selector:
            target:
              entity:
                domain: light
        delay_off:
          name: Turn Off Delay
          description: How long to wait before turning off lights after no motion (minutes)
          default: 5
          selector:
            number:
              min: 1
              max: 60
              unit_of_measurement: minutes
        use_schedule:
          name: Use Schedule
          description: Whether to use the room's schedule settings for scene selection
          default: true
          selector:
            boolean:
    
    trigger:
      - platform: state
        entity_id: !input motion_sensor
        to: "on"
    
    condition:
      - condition: state
        entity_id: input_boolean.{{ room_name }}_schedule_enabled
        state: "on"
    
    action:
      - choose:
          # Schedule 1: Morning (06:00-09:00)
          - conditions:
              - condition: time
                after: "06:00:00"
                before: "09:00:00"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_schedule_1_scene') }}
                data:
                  transition: 2
          
          # Schedule 2: Day (09:00-17:00)
          - conditions:
              - condition: time
                after: "09:00:00"
                before: "17:00:00"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_schedule_2_scene') }}
                data:
                  transition: 2
          
          # Schedule 3: Evening (17:00-21:00)
          - conditions:
              - condition: time
                after: "17:00:00"
                before: "21:00:00"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_schedule_3_scene') }}
                data:
                  transition: 2
          
          # Schedule 4: Night (21:00-23:00)
          - conditions:
              - condition: time
                after: "21:00:00"
                before: "23:00:00"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_schedule_4_scene') }}
                data:
                  transition: 2
          
          # Schedule 5: Late Night (23:00-06:00)
          - conditions:
              - condition: time
                after: "23:00:00"
                before: "06:00:00"
            sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_schedule_5_scene') }}
                data:
                  transition: 2
          
          # Default fallback
          - sequence:
              - service: scene.turn_on
                target:
                  entity_id: scene.{{ room_name }}_{{ states('input_select.' + room_name + '_default_scene') }}
                data:
                  transition: 2
    
      # Turn off lights after delay
      - delay: "{{ delay_off }}:00"
      - condition: state
        entity_id: !input motion_sensor
        state: "off"
      - service: light.turn_off
        target: !input target_lights
        data:
          transition: 5
    
    mode: restart

