apiVersion: v1
data:
  room_motion_control.yaml: |
    blueprint:
      name: Room - Motion Control (scheduled scene, per-window options)
      description: >
        On motion: optionally turn on using script.scheduled_light_on based on current schedule slot
        (morning/day/evening/night). For each window you can block "turn-on" and set an auto-off
        timeout after motion clears. Supports per-room schedule overrides via helpers.
      domain: automation

      input:
        room_key:
          name: Room Key
          description: "Short name used by scenes: scene.<room_key>_(morning|day|evening|night)"
          selector: { text: {} }

        target_lights:
          name: Target lights (group or list)
          selector: { target: { entity: { domain: light } } }

        motion_sensor:
          name: Motion sensor (binary_sensor)
          selector: { entity: { domain: binary_sensor } }

        motion_enabled:
          name: Motion Control Enabled (input_boolean)
          description: If OFF, motion won't control lights in this room.
          selector: { entity: { domain: input_boolean } }

        # ---- Optional: pass your per-room schedule overrides to scheduled_light_on
        custom_schedule_enabled:
          name: (Optional) Custom schedule enabled boolean
          default:
          selector: { entity: { domain: input_boolean } }
        custom_s1_start:
          name: (Optional) Morning start (time-only)
          default:
          selector: { entity: { domain: input_datetime } }
        custom_s2_start:
          name: (Optional) Day start (time-only)
          default:
          selector: { entity: { domain: input_datetime } }
        custom_s3_start:
          name: (Optional) Evening start (time-only)
          default:
          selector: { entity: { domain: input_datetime } }
        custom_s4_start:
          name: (Optional) Night start (time-only)
          default:
          selector: { entity: { domain: input_datetime } }

        # ---- Per-window controls (helpers optional; defaults provided)
        morning_block_helper:
          name: (Optional) Block motion ON during Morning (input_boolean)
          default:
          selector: { entity: { domain: input_boolean } }
        day_block_helper:
          name: (Optional) Block motion ON during Day (input_boolean)
          default:
          selector: { entity: { domain: input_boolean } }
        evening_block_helper:
          name: (Optional) Block motion ON during Evening (input_boolean)
          default:
          selector: { entity: { domain: input_boolean } }
        night_block_helper:
          name: (Optional) Block motion ON during Night (input_boolean)
          default:
          selector: { entity: { domain: input_boolean } }

        morning_auto_off_default:
          name: Morning auto-off (minutes, default if no helper)
          default: 5
          selector: { number: { min: 0, max: 240, mode: slider } }
        morning_auto_off_helper:
          name: (Optional) Morning auto-off helper (input_number)
          default:
          selector: { entity: { domain: input_number } }

        day_auto_off_default:
          name: Day auto-off (minutes, default if no helper)
          default: 5
          selector: { number: { min: 0, max: 240, mode: slider } }
        day_auto_off_helper:
          name: (Optional) Day auto-off helper (input_number)
          default:
          selector: { entity: { domain: input_number } }

        evening_auto_off_default:
          name: Evening auto-off (minutes, default if no helper)
          default: 10
          selector: { number: { min: 0, max: 240, mode: slider } }
        evening_auto_off_helper:
          name: (Optional) Evening auto-off helper (input_number)
          default:
          selector: { entity: { domain: input_number } }

        night_auto_off_default:
          name: Night auto-off (minutes, default if no helper)
          default: 1
          selector: { number: { min: 0, max: 240, mode: slider } }
        night_auto_off_helper:
          name: (Optional) Night auto-off helper (input_number)
          default:
          selector: { entity: { domain: input_number } }

    mode: restart
    max_exceeded: silent

    variables:
      default_s1: "06:00:00"
      default_s2: "09:00:00"
      default_s3: "17:00:00"
      default_s4: "22:00:00"

      use_custom: >-
        {{ custom_schedule_enabled is defined and custom_schedule_enabled != none and
           is_state(custom_schedule_enabled, 'on') }}

      s1_str: >-
        {% set v = states(custom_s1_start) if use_custom else default_s1 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
      s2_str: >-
        {% set v = states(custom_s2_start) if use_custom else default_s2 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
      s3_str: >-
        {% set v = states(custom_s3_start) if use_custom else default_s3 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
      s4_str: >-
        {% set v = states(custom_s4_start) if use_custom else default_s4 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}

      now_ts: "{{ as_timestamp(now()) }}"
      s1: "{{ as_timestamp(today_at(s1_str)) }}"
      s2: "{{ as_timestamp(today_at(s2_str)) }}"
      s3: "{{ as_timestamp(today_at(s3_str)) }}"
      s4: "{{ as_timestamp(today_at(s4_str)) }}"

      slot: >-
        {% if now_ts >= s1 and now_ts < s2 %}morning
        {% elif now_ts >= s2 and now_ts < s3 %}day
        {% elif now_ts >= s3 and now_ts < s4 %}evening
        {% else %}night{% endif %}

      block_morning: "{{ is_state(morning_block_helper, 'on') if morning_block_helper else false }}"
      block_day:     "{{ is_state(day_block_helper, 'on') if day_block_helper else false }}"
      block_evening: "{{ is_state(evening_block_helper, 'on') if evening_block_helper else false }}"
      block_night:   "{{ is_state(night_block_helper, 'on') if night_block_helper else false }}"

      morning_auto_off_mins: >-
        {{ (states(morning_auto_off_helper) | int(0)) if morning_auto_off_helper else (morning_auto_off_default | int) }}
      day_auto_off_mins: >-
        {{ (states(day_auto_off_helper) | int(0)) if day_auto_off_helper else (day_auto_off_default | int) }}
      evening_auto_off_mins: >-
        {{ (states(evening_auto_off_helper) | int(0)) if evening_auto_off_helper else (evening_auto_off_default | int) }}
      night_auto_off_mins: >-
        {{ (states(night_auto_off_helper) | int(0)) if night_auto_off_helper else (night_auto_off_default | int) }}

      block_current: >-
        {% set map = {'morning': block_morning, 'day': block_day, 'evening': block_evening, 'night': block_night} %}
        {{ map[slot] }}
      auto_off_current_mins: >-
        {% set map = {
          'morning': morning_auto_off_mins,
          'day': day_auto_off_mins,
          'evening': evening_auto_off_mins,
          'night': night_auto_off_mins
        } %}
        {{ map[slot] | int(0) }}

    trigger:
      - platform: state
        entity_id: !input motion_sensor
        to: "on"
        id: motion_on

      - platform: state
        entity_id: !input motion_sensor
        to: "off"
        id: motion_off

    condition: []

    action:
      - choose:
          - conditions:
              - condition: trigger
                id: motion_on
              - condition: state
                entity_id: !input motion_enabled
                state: "on"
              - condition: template
                value_template: "{{ not block_current }}"
            sequence:
              - service: script.scheduled_light_on
                data:
                  room_key: !input room_key
                  custom_schedule_enabled: !input custom_schedule_enabled
                  custom_s1_start: !input custom_s1_start
                  custom_s2_start: !input custom_s2_start
                  custom_s3_start: !input custom_s3_start
                  custom_s4_start: !input custom_s4_start

          - conditions:
              - condition: trigger
                id: motion_off
              - condition: state
                entity_id: !input motion_enabled
                state: "on"
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ auto_off_current_mins | int(0) > 0 }}"
                then:
                  - delay:
                      minutes: "{{ auto_off_current_mins | int(0) }}"
                  - condition: state
                    entity_id: !input motion_sensor
                    state: "off"
                  - service: light.turn_off
                    target: !input target_lights
  room_switch_control.yaml: "blueprint:\n  name: Room - Switch Control (Hue Dimmer,
    scheduled scenes)\n  description: >\n    Map Hue 4-button dimmer actions to room
    lighting. Defaults use scheduled_light_on\n    for ON/toggle and provide brightness
    adjustments, scene cycling, and all-off.\n    Optional input_select helpers (one
    per press type) can override actions via dashboard.\n    Also supports legacy
    hue_event triggers via optional hue_event_id.\n  domain: automation\n\n  input:\n
    \   room_key:\n      name: Room Key\n      description: \"Short name used by scenes:
    scene.<room_key>_(morning|day|evening|night)\"\n      selector:\n        text:
    {}\n\n    target_lights:\n      name: Target lights (group or list)\n      selector:\n
    \       target:\n          entity:\n            domain: light\n\n    dimmer:\n
    \     name: Hue Dimmer device\n      selector:\n        device:\n          integration:
    hue\n\n    hue_event_id:\n      name: (Optional) Hue event ID (for hue_event compatibility)\n
    \     description: \"Example: living_room_switch_button\"\n      default:\n      selector:\n
    \       text: {}\n\n    # ---- Optional schedule passthrough for scheduled_light_on\n
    \   custom_schedule_enabled:\n      name: (Optional) Custom schedule enabled boolean\n
    \     default:\n      selector:\n        entity:\n          domain: input_boolean\n
    \   custom_s1_start:\n      name: (Optional) Morning start (time-only)\n      default:\n
    \     selector:\n        entity:\n          domain: input_datetime\n    custom_s2_start:\n
    \     name: (Optional) Day start (time-only)\n      default:\n      selector:\n
    \       entity:\n          domain: input_datetime\n    custom_s3_start:\n      name:
    (Optional) Evening start (time-only)\n      default:\n      selector:\n        entity:\n
    \         domain: input_datetime\n    custom_s4_start:\n      name: (Optional)
    Night start (time-only)\n      default:\n      selector:\n        entity:\n          domain:
    input_datetime\n\n    # ---- Optional scene cycle memory helper\n    scene_cycle_helper:\n
    \     name: (Optional) Scene cycle helper (input_select)\n      description: \"Stores
    the CURRENT slot; cycles morning→day→evening→night. Defaults to input_select.<room_key>_scene_cycle\"\n
    \     default: \"\"\n      selector:\n        entity:\n          domain: input_select\n\n
    \   # ---- Optional brightness helpers\n    brightness_step_helper:\n      name:
    (Optional) Brightness step helper (input_number, %)\n      description: \"e.g.
    input_number.<room>_brightness_step_pct\"\n      default:\n      selector:\n        entity:\n
    \         domain: input_number\n    min_brightness_helper:\n      name: (Optional)
    Min brightness helper (input_number, %)\n      description: \"e.g. input_number.<room>_min_brightness_pct\"\n
    \     default:\n      selector:\n        entity:\n          domain: input_number\n
    \   max_brightness_helper:\n      name: (Optional) Max brightness helper (input_number,
    %)\n      description: \"e.g. input_number.<room>_max_brightness_pct\"\n      default:\n
    \     selector:\n        entity:\n          domain: input_number\n\n    # ----
    Static brightness fallback values\n    brightness_step_pct:\n      name: Fallback
    brightness step (%)\n      default: 10\n      selector:\n        number:\n          min:
    1\n          max: 50\n          unit_of_measurement: \"%\"\n          mode: slider\n\n
    \   # ---- Optional per-button override helpers\n    btn1_short_action_helper:\n
    \     name: (Optional) Button 1 Short action (input_select)\n      default:\n
    \     selector:\n        entity:\n          domain: input_select\n    btn1_long_action_helper:\n
    \     name: (Optional) Button 1 Long action (input_select)\n      default:\n      selector:\n
    \       entity:\n          domain: input_select\n    btn2_short_action_helper:\n
    \     name: (Optional) Button 2 Short action (input_select)\n      default:\n
    \     selector:\n        entity:\n          domain: input_select\n    btn2_long_action_helper:\n
    \     name: (Optional) Button 2 Long action (input_select)\n      default:\n      selector:\n
    \       entity:\n          domain: input_select\n    btn3_short_action_helper:\n
    \     name: (Optional) Button 3 Short action (input_select)\n      default:\n
    \     selector:\n        entity:\n          domain: input_select\n    btn3_long_action_helper:\n
    \     name: (Optional) Button 3 Long action (input_select)\n      default:\n      selector:\n
    \       entity:\n          domain: input_select\n    btn4_short_action_helper:\n
    \     name: (Optional) Button 4 Short action (input_select)\n      default:\n
    \     selector:\n        entity:\n          domain: input_select\n    btn4_long_action_helper:\n
    \     name: (Optional) Button 4 Long action (input_select)\n      default:\n      selector:\n
    \       entity:\n          domain: input_select\n\nmode: restart\nmax_exceeded:
    silent\n\nvariables:\n  # Materialize all optional inputs so they're available
    in templates\n  btn1_short_action_helper: !input btn1_short_action_helper\n  btn1_long_action_helper:
    !input btn1_long_action_helper\n  btn2_short_action_helper: !input btn2_short_action_helper\n
    \ btn2_long_action_helper: !input btn2_long_action_helper\n  btn3_short_action_helper:
    !input btn3_short_action_helper\n  btn3_long_action_helper: !input btn3_long_action_helper\n
    \ btn4_short_action_helper: !input btn4_short_action_helper\n  btn4_long_action_helper:
    !input btn4_long_action_helper\n  \n  brightness_step_helper: !input brightness_step_helper\n
    \ min_brightness_helper: !input min_brightness_helper\n  max_brightness_helper:
    !input max_brightness_helper\n  brightness_step_pct: !input brightness_step_pct\n
    \ \n  scene_cycle_helper_input: !input scene_cycle_helper\n  room_key: !input
    room_key\n  scene_cycle_helper: >-\n    {% if scene_cycle_helper_input and scene_cycle_helper_input
    != '' %}\n      {{ scene_cycle_helper_input }}\n    {% else %}\n      input_select.{{
    room_key }}_scene_cycle\n    {% endif %}\n  custom_schedule_enabled: !input custom_schedule_enabled\n
    \ custom_s1_start: !input custom_s1_start\n  custom_s2_start: !input custom_s2_start\n
    \ custom_s3_start: !input custom_s3_start\n  custom_s4_start: !input custom_s4_start\n
    \ \n  # materialize inputs so we can reference them in templates/logs\n  room_key_input:
    !input room_key\n  target_lights_input: !input target_lights\n\n  custom_schedule_enabled_input:
    !input custom_schedule_enabled\n  custom_s1_start_input: !input custom_s1_start\n
    \ custom_s2_start_input: !input custom_s2_start\n  custom_s3_start_input: !input
    custom_s3_start\n  custom_s4_start_input: !input custom_s4_start\n\n  # ---- Resolve
    per-button actions (helper overrides if provided; else defaults)\n  btn1_short_action:
    >-\n    {{ states(btn1_short_action_helper) if btn1_short_action_helper else 'toggle'
    }}\n  btn1_long_action: >-\n    {{ states(btn1_long_action_helper) if btn1_long_action_helper
    else 'all_off' }}\n\n  btn2_short_action: >-\n    {{ states(btn2_short_action_helper)
    if btn2_short_action_helper else 'brightness_up' }}\n  btn2_long_action: >-\n
    \   {{ states(btn2_long_action_helper) if btn2_long_action_helper else 'brightness_max'
    }}\n\n  btn3_short_action: >-\n    {{ states(btn3_short_action_helper) if btn3_short_action_helper
    else 'brightness_down' }}\n  btn3_long_action: >-\n    {{ states(btn3_long_action_helper)
    if btn3_long_action_helper else 'brightness_min' }}\n\n  btn4_short_action: >-\n
    \   {{ states(btn4_short_action_helper) if btn4_short_action_helper else 'scene_cycle'
    }}\n  btn4_long_action: >-\n    {{ states(btn4_long_action_helper) if btn4_long_action_helper
    else 'default_scene' }}\n\n  # ---- Resolve brightness from helpers, with safe
    fallbacks\n  _step_raw: >-\n    {% if brightness_step_helper %}{{ states(brightness_step_helper)
    }}{% else %}{{ '' }}{% endif %}\n  _min_raw: >-\n    {% if min_brightness_helper
    %}{{ states(min_brightness_helper) }}{% else %}{{ '' }}{% endif %}\n  _max_raw:
    >-\n    {% if max_brightness_helper %}{{ states(max_brightness_helper) }}{% else
    %}{{ '' }}{% endif %}\n\n  brightness_step_pct_resolved: >-\n    {% set v = _step_raw
    %}\n    {{ (v | int(10)) if v not in ['unknown','unavailable','', None] else (brightness_step_pct
    | int) }}\n\n  min_brightness_pct_resolved: >-\n    {% set v = _min_raw %}\n    {{
    (v | int(1)) if v not in ['unknown','unavailable','', None] else 1 }}\n\n  max_brightness_pct_resolved:
    >-\n    {% set v = _max_raw %}\n    {{ (v | int(100)) if v not in ['unknown','unavailable','',
    None] else 100 }}\n\n  # ---- Time window / slot calc\n  default_s1: \"06:00:00\"\n
    \ default_s2: \"09:00:00\"\n  default_s3: \"17:00:00\"\n  default_s4: \"22:00:00\"\n\n
    \ use_custom: >-\n    {{ custom_schedule_enabled_input is not none and\n       custom_schedule_enabled_input
    != '' and\n       is_state(custom_schedule_enabled_input, 'on') }}\n\n  s1_str:
    >-\n    {% set v = states(custom_s1_start_input) if use_custom else default_s1
    %}\n    {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{
    v }}{% endif %}\n  s2_str: >-\n    {% set v = states(custom_s2_start_input) if
    use_custom else default_s2 %}\n    {% if v in ['unknown','unavailable',''] %}{{
    default_s2 }}{% else %}{{ v }}{% endif %}\n  s3_str: >-\n    {% set v = states(custom_s3_start_input)
    if use_custom else default_s3 %}\n    {% if v in ['unknown','unavailable','']
    %}{{ default_s3 }}{% else %}{{ v }}{% endif %}\n  s4_str: >-\n    {% set v = states(custom_s4_start_input)
    if use_custom else default_s4 %}\n    {% if v in ['unknown','unavailable','']
    %}{{ default_s4 }}{% else %}{{ v }}{% endif %}\n\n  now_ts: \"{{ as_timestamp(now())
    }}\"\n  s1: \"{{ as_timestamp(today_at(s1_str)) }}\"\n  s2: \"{{ as_timestamp(today_at(s2_str))
    }}\"\n  s3: \"{{ as_timestamp(today_at(s3_str)) }}\"\n  s4: \"{{ as_timestamp(today_at(s4_str))
    }}\"\n\n  current_slot: >-\n    {% if now_ts >= s1 and now_ts < s2 %}morning\n
    \   {% elif now_ts >= s2 and now_ts < s3 %}day\n    {% elif now_ts >= s3 and now_ts
    < s4 %}evening\n    {% else %}night{% endif %}\n\ntrigger:\n  # Event-based triggers
    (Philips Hue v2 \"hue_event\")\n  - platform: event\n    event_type: hue_event\n
    \   event_data:\n      id: !input hue_event_id\n      type: initial_press\n      subtype:
    1\n    id: e1_short\n  - platform: event\n    event_type: hue_event\n    event_data:\n
    \     id: !input hue_event_id\n      type: long_press\n      subtype: 1\n    id:
    e1_long\n\n  - platform: event\n    event_type: hue_event\n    event_data:\n      id:
    !input hue_event_id\n      type: initial_press\n      subtype: 2\n    id: e2_short\n
    \ - platform: event\n    event_type: hue_event\n    event_data:\n      id: !input
    hue_event_id\n      type: long_press\n      subtype: 2\n    id: e2_long\n\n  -
    platform: event\n    event_type: hue_event\n    event_data:\n      id: !input
    hue_event_id\n      type: short_release\n      subtype: 3\n    id: e3_short\n
    \ - platform: event\n    event_type: hue_event\n    event_data:\n      id: !input
    hue_event_id\n      type: long_press\n      subtype: 3\n    id: e3_long\n\n  -
    platform: event\n    event_type: hue_event\n    event_data:\n      id: !input
    hue_event_id\n      type: short_release\n      subtype: 4\n    id: e4_short\n
    \ - platform: event\n    event_type: hue_event\n    event_data:\n      id: !input
    hue_event_id\n      type: long_press\n      subtype: 4\n    id: e4_long\n\naction:\n
    \ # First: debug log so we SEE if the trigger actually fired\n  - service: logbook.log\n
    \   data:\n      name: \"room_switch_control\"\n      message: >-\n        Trigger
    {{ trigger.id }} mapped for room {{ room_key_input }}.\n        Lights {{ target_lights_input
    }}.\n\n  # Resolve which logical action to run for this trigger\n  - variables:\n
    \     action_key: >-\n        {% set id = trigger.id %}\n        {% if id == 'e1_short'
    %}{{ btn1_short_action }}\n        {% elif id == 'e1_long' %}{{ btn1_long_action
    }}\n        {% elif id == 'e2_short' %}{{ btn2_short_action }}\n        {% elif
    id == 'e2_long' %}{{ btn2_long_action }}\n        {% elif id == 'e3_short' %}{{
    btn3_short_action }}\n        {% elif id == 'e3_long' %}{{ btn3_long_action }}\n
    \       {% elif id == 'e4_short' %}{{ btn4_short_action }}\n        {% elif id
    == 'e4_long' %}{{ btn4_long_action }}\n        {% else %}unknown{% endif %}\n\n
    \ - service: logbook.log\n    data:\n      name: \"room_switch_control\"\n      message:
    >-\n        action_key={{ action_key }}\n\n  - choose:\n      # --- toggle ->
    call room_toggle with only the supported args\n      - conditions: \"{{ action_key
    == 'toggle' }}\"\n        sequence:\n          - service: script.room_toggle\n
    \           data:\n              room_key: \"{{ room_key_input }}\"\n              target_lights:
    \"{{ target_lights_input.entity_id if target_lights_input.entity_id is defined
    else target_lights_input }}\"\n              custom_schedule_enabled: \"{{ custom_schedule_enabled
    }}\"\n              custom_s1_start: \"{{ custom_s1_start }}\"\n              custom_s2_start:
    \"{{ custom_s2_start }}\"\n              custom_s3_start: \"{{ custom_s3_start
    }}\"\n              custom_s4_start: \"{{ custom_s4_start }}\"\n\n      # ---
    scheduled_on/default_scene -> directly call scheduled_light_on with schedule overrides\n
    \     - conditions: \"{{ action_key == 'scheduled_on' or action_key == 'default_scene'
    }}\"\n        sequence:\n          - service: script.scheduled_light_on\n            data:\n
    \             room_key: \"{{ room_key_input }}\"\n              custom_schedule_enabled:
    \"{{ custom_schedule_enabled_input }}\"\n              custom_s1_start: \"{{ custom_s1_start_input
    }}\"\n              custom_s2_start: \"{{ custom_s2_start_input }}\"\n              custom_s3_start:
    \"{{ custom_s3_start_input }}\"\n              custom_s4_start: \"{{ custom_s4_start_input
    }}\"\n              fallback_lights: \"{{ target_lights_input.entity_id if target_lights_input.entity_id
    is defined else target_lights_input }}\"\n\n      - conditions: \"{{ action_key
    == 'all_off' }}\"\n        sequence:\n          - service: light.turn_off\n            target:
    !input target_lights\n\n      - conditions: \"{{ action_key == 'brightness_up'
    }}\"\n        sequence:\n          - service: light.turn_on\n            target:
    !input target_lights\n            data:\n              brightness_step_pct: \"{{
    brightness_step_pct_resolved | int }}\"\n\n      - conditions: \"{{ action_key
    == 'brightness_down' }}\"\n        sequence:\n          - service: light.turn_on\n
    \           target: !input target_lights\n            data:\n              brightness_step_pct:
    \"{{ 0 - (brightness_step_pct_resolved | int) }}\"\n\n      - conditions: \"{{
    action_key == 'brightness_min' }}\"\n        sequence:\n          - service: light.turn_on\n
    \           target: !input target_lights\n            data:\n              brightness_pct:
    \"{{ min_brightness_pct_resolved | int }}\"\n\n      - conditions: \"{{ action_key
    == 'brightness_max' }}\"\n        sequence:\n          - service: light.turn_on\n
    \           target: !input target_lights\n            data:\n              brightness_pct:
    \"{{ max_brightness_pct_resolved | int }}\"\n\n      - conditions: \"{{ action_key
    == 'scene_cycle' }}\"\n        sequence:\n          - variables:\n              order:
    ['morning','day','evening','night']\n              cur_slot: >-\n                {%
    if scene_cycle_helper %}\n                  {{ states(scene_cycle_helper) | default(current_slot)
    }}\n                {% else %}\n                  {{ current_slot }}\n                {%
    endif %}\n              idx: \"{{ order.index(cur_slot) if cur_slot in order else
    0 }}\"\n              next_slot: \"{{ order[(idx + 1) % order | length] }}\"\n
    \             scene_to_activate: \"scene.{{ room_key_input }}_{{ next_slot }}\"\n
    \         - service: logbook.log\n            data:\n              name: \"scene_cycle
    DEBUG\"\n              message: >-\n                helper={{ scene_cycle_helper
    }}, cur_slot={{ cur_slot }}, \n                next_slot={{ next_slot }}, scene={{
    scene_to_activate }}\n          - if:\n              - condition: template\n                value_template:
    \"{{ scene_cycle_helper is not none and scene_cycle_helper != '' }}\"\n            then:\n
    \             - service: input_select.select_option\n                target:\n
    \                 entity_id: \"{{ scene_cycle_helper }}\"\n                data:\n
    \                 option: \"{{ next_slot }}\"\n          - service: scene.turn_on\n
    \           target:\n              entity_id: \"{{ scene_to_activate }}\"\n"
  room_timer_control.yaml: |
    blueprint:
      name: Room - Timer Control (apply scene at window start)
      description: >
        On each time window start (morning/day/evening/night), optionally auto-turn-on
        or only update scene on currently-on lights. Uses the same shared custom schedule
        as other automations.
      domain: automation

      input:
        room_key:
          name: Room Key
          description: "Short name used by scenes: scene.<room_key>_(morning|day|evening|night)"
          selector: { text: {} }

        target_lights:
          name: Target lights (group or list)
          selector: { target: { entity: { domain: light } } }

        # Shared schedule helpers
        custom_schedule_enabled:
          name: Custom schedule enabled (input_boolean)
          selector: { entity: { domain: input_boolean } }
        custom_s1_start:
          name: Morning start (input_datetime, time-only)
          selector: { entity: { domain: input_datetime } }
        custom_s2_start:
          name: Day start (input_datetime, time-only)
          selector: { entity: { domain: input_datetime } }
        custom_s3_start:
          name: Evening start (input_datetime, time-only)
          selector: { entity: { domain: input_datetime } }
        custom_s4_start:
          name: Night start (input_datetime, time-only)
          selector: { entity: { domain: input_datetime } }

        # Per-window controls (helpers; can be shared booleans or per-room ones)
        enable_morning_helper:
          name: Morning Enabled (input_boolean, default ON if empty)
          default:
          selector: { entity: { domain: input_boolean } }
        auto_on_morning_helper:
          name: Morning Auto-on (input_boolean, default OFF if empty)
          default:
          selector: { entity: { domain: input_boolean } }

        enable_day_helper:
          name: Day Enabled (input_boolean, default ON if empty)
          default:
          selector: { entity: { domain: input_boolean } }
        auto_on_day_helper:
          name: Day Auto-on (input_boolean, default OFF if empty)
          default:
          selector: { entity: { domain: input_boolean } }

        enable_evening_helper:
          name: Evening Enabled (input_boolean, default ON if empty)
          default:
          selector: { entity: { domain: input_boolean } }
        auto_on_evening_helper:
          name: Evening Auto-on (input_boolean, default OFF if empty)
          default:
          selector: { entity: { domain: input_boolean } }

        enable_night_helper:
          name: Night Enabled (input_boolean, default ON if empty)
          default:
          selector: { entity: { domain: input_boolean } }
        auto_on_night_helper:
          name: Night Auto-on (input_boolean, default OFF if empty)
          default:
          selector: { entity: { domain: input_boolean } }

    mode: restart
    max_exceeded: silent

    variables:
      default_s1: "06:00:00"
      default_s2: "09:00:00"
      default_s3: "17:00:00"
      default_s4: "22:00:00"

      use_custom: >-
        {{ is_state(custom_schedule_enabled, 'on') }}

      s1: >-
        {% set t = states(custom_s1_start) if use_custom else default_s1 %}
        {% set t = default_s1 if t in ['unknown','unavailable',''] else t %}
        {{ t[:5] }}
      s2: >-
        {% set t = states(custom_s2_start) if use_custom else default_s2 %}
        {% set t = default_s2 if t in ['unknown','unavailable',''] else t %}
        {{ t[:5] }}
      s3: >-
        {% set t = states(custom_s3_start) if use_custom else default_s3 %}
        {% set t = default_s3 if t in ['unknown','unavailable',''] else t %}
        {{ t[:5] }}
      s4: >-
        {% set t = states(custom_s4_start) if use_custom else default_s4 %}
        {% set t = default_s4 if t in ['unknown','unavailable',''] else t %}
        {{ t[:5] }}

      now_hm: "{{ now().strftime('%H:%M') }}"

      # Window enable/auto_on booleans with sensible defaults
      en_morning: "{{ is_state(enable_morning_helper, 'on') if enable_morning_helper else true }}"
      ao_morning: "{{ is_state(auto_on_morning_helper, 'on') if auto_on_morning_helper else false }}"
      en_day:     "{{ is_state(enable_day_helper, 'on') if enable_day_helper else true }}"
      ao_day:     "{{ is_state(auto_on_day_helper, 'on') if auto_on_day_helper else false }}"
      en_evening: "{{ is_state(enable_evening_helper, 'on') if enable_evening_helper else true }}"
      ao_evening: "{{ is_state(auto_on_evening_helper, 'on') if auto_on_evening_helper else false }}"
      en_night:   "{{ is_state(enable_night_helper, 'on') if enable_night_helper else true }}"
      ao_night:   "{{ is_state(auto_on_night_helper, 'on') if auto_on_night_helper else false }}"

      fired_slot: >-
        {% if now_hm == s1 %}morning
        {% elif now_hm == s2 %}day
        {% elif now_hm == s3 %}evening
        {% elif now_hm == s4 %}night
        {% else %}none{% endif %}

    trigger:
      # Evaluate every minute; if it matches any boundary, the action will run
      - platform: time_pattern
        minutes: "/1"

    action:
      - variables:
          any_on: >-
            {% set targets = target_lights.entity_id if target_lights is mapping else target_lights %}
            {{ expand(targets) | selectattr('state','eq','on') | list | count > 0 if targets else false }}

      - choose:
          - conditions: "{{ fired_slot == 'morning' and en_morning | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_morning | bool }}"
                    sequence:
                      - service: script.scheduled_light_on
                        data:
                          room_key: !input room_key
                          custom_schedule_enabled: !input custom_schedule_enabled
                          custom_s1_start: !input custom_s1_start
                          custom_s2_start: !input custom_s2_start
                          custom_s3_start: !input custom_s3_start
                          custom_s4_start: !input custom_s4_start

          - conditions: "{{ fired_slot == 'day' and en_day | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_day | bool }}"
                    sequence:
                      - service: script.scheduled_light_on
                        data:
                          room_key: !input room_key
                          custom_schedule_enabled: !input custom_schedule_enabled
                          custom_s1_start: !input custom_s1_start
                          custom_s2_start: !input custom_s2_start
                          custom_s3_start: !input custom_s3_start
                          custom_s4_start: !input custom_s4_start

          - conditions: "{{ fired_slot == 'evening' and en_evening | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_evening | bool }}"
                    sequence:
                      - service: script.scheduled_light_on
                        data:
                          room_key: !input room_key
                          custom_schedule_enabled: !input custom_schedule_enabled
                          custom_s1_start: !input custom_s1_start
                          custom_s2_start: !input custom_s2_start
                          custom_s3_start: !input custom_s3_start
                          custom_s4_start: !input custom_s4_start

          - conditions: "{{ fired_slot == 'night' and en_night | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_night | bool }}"
                    sequence:
                      - service: script.scheduled_light_on
                        data:
                          room_key: !input room_key
                          custom_schedule_enabled: !input custom_schedule_enabled
                          custom_s1_start: !input custom_s1_start
                          custom_s2_start: !input custom_s2_start
                          custom_s3_start: !input custom_s3_start
                          custom_s4_start: !input custom_s4_start
kind: ConfigMap
metadata:
  name: homeassistant-blueprints
