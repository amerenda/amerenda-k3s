apiVersion: v1
kind: ConfigMap
metadata:
  name: ha-blueprints-defaults
  namespace: home-assistant
  annotations:
    reloader.stakater.com/auto: "true"
data:
  hue_switch_control.yaml: |
    blueprint:
      name: Hue - Switch Control (Multi-Schedule)
      description: >
        Control Hue lights with a Hue switch/dimmer. Supports:
        - Button 1: Toggle lights on/off with time-based scene scheduling (5 time windows)
        - Button 2: Brightness up
        - Button 3: Brightness down  
        - Button 4: Custom action (default: scene cycle)
        - Time-based scenes: Configure different scenes for morning, day, evening, night, and late night
      domain: automation
      input:
        target_lights:
          name: Target lights
          description: Lights to control with this switch
          selector:
            entity:
              domain: light
              multiple: true
        
        switch_entity:
          name: Hue switch event entity
          description: e.g. event.living_room_switch_button_1
          selector:
            entity:
              domain: event
        
        # Button 1: Toggle
        button_1_toggle:
          name: Button 1 - Toggle lights
          description: Enable toggle on/off for button 1
          default: true
          selector:
            boolean: {}
        
        # Button 2: Brightness up
        button_2_brightness_up:
          name: Button 2 - Brightness up
          description: Enable brightness up for button 2
          default: true
          selector:
            boolean: {}
        
        brightness_step:
          name: Brightness step
          description: How much to increase/decrease brightness
          default: 25
          selector:
            number:
              min: 1
              max: 100
              step: 1
        
        # Button 3: Brightness down
        button_3_brightness_down:
          name: Button 3 - Brightness down
          description: Enable brightness down for button 3
          default: true
          selector:
            boolean: {}
        
        # Button 4: Custom action
        button_4_custom:
          name: Button 4 - Custom action
          description: Enable custom action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_action:
          name: Button 4 - Action type
          description: What action to perform on button 4
          default: scene_cycle
          selector:
            select:
              options:
                - scene_cycle
                - scene_next
                - scene_previous
                - color_cycle
                - custom_service
        
        # Long press actions
        button_1_long_press:
          name: Button 1 - Long press action
          description: Enable long press action for button 1
          default: true
          selector:
            boolean: {}
        
        button_1_long_action:
          name: Button 1 - Long press action type
          description: What action to perform on button 1 long press
          default: all_lights_off
          selector:
            select:
              options:
                - all_lights_off
                - custom_service
        
        button_4_long_press:
          name: Button 4 - Long press action
          description: Enable long press action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_long_action:
          name: Button 4 - Long press action type
          description: What action to perform on button 4 long press
          default: room_relax_scene
          selector:
            select:
              options:
                - room_relax_scene
                - custom_service
        
        # Long press scene
        room_relax_scene:
          name: Room relax scene
          description: Scene to activate on button 4 long press (e.g. scene.living_room_relax)
          default: ""
          selector:
            entity:
              domain: scene
        
        # Scene cycling options
        scene_entities:
          name: Scenes to cycle through
          description: List of scenes to cycle through (for scene_cycle/next/previous)
          default: []
          selector:
            entity:
              domain: scene
              multiple: true
        
        # Custom service for button 4
        custom_service:
          name: Custom service (when action = custom_service)
          description: Service to call for button 4 custom action
          default: ""
          selector:
            text: {}
        
        custom_service_data:
          name: Custom service data
          description: Data to pass to custom service (YAML format)
          default: "{}"
          selector:
            text: {}
        
        # Brightness limits
        min_brightness:
          name: Minimum brightness
          description: Minimum brightness level (1-255)
          default: 1
          selector:
            number:
              min: 1
              max: 255
              step: 1
        
        max_brightness:
          name: Maximum brightness
          description: Maximum brightness level (1-255)
          default: 255
          selector:
            number:
              min: 1
              max: 255
              step: 1
    
        # Time-based scene scheduling
        time_schedule_enabled:
          name: Enable time-based scenes
          description: "Enable different scenes based on time of day"
          default: true
          selector:
            boolean: {}
    
        # Schedule 1: Morning
        schedule_1_start:
          name: Schedule 1 - Start time
          description: "Morning scene start time (24-hour format)"
          default: "06:00"
          selector:
            time: {}
        
        schedule_1_end:
          name: Schedule 1 - End time
          description: "Morning scene end time (24-hour format)"
          default: "09:00"
          selector:
            time: {}
        
        schedule_1_scene:
          name: Schedule 1 - Scene
          description: "Scene to activate during morning hours"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Schedule 2: Day
        schedule_2_start:
          name: Schedule 2 - Start time
          description: "Day scene start time (24-hour format)"
          default: "09:00"
          selector:
            time: {}
        
        schedule_2_end:
          name: Schedule 2 - End time
          description: "Day scene end time (24-hour format)"
          default: "17:00"
          selector:
            time: {}
        
        schedule_2_scene:
          name: Schedule 2 - Scene
          description: "Scene to activate during day hours"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Schedule 3: Evening
        schedule_3_start:
          name: Schedule 3 - Start time
          description: "Evening scene start time (24-hour format)"
          default: "17:00"
          selector:
            time: {}
        
        schedule_3_end:
          name: Schedule 3 - End time
          description: "Evening scene end time (24-hour format)"
          default: "21:00"
          selector:
            time: {}
        
        schedule_3_scene:
          name: Schedule 3 - Scene
          description: "Scene to activate during evening hours"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Schedule 4: Night
        schedule_4_start:
          name: Schedule 4 - Start time
          description: "Night scene start time (24-hour format)"
          default: "21:00"
          selector:
            time: {}
        
        schedule_4_end:
          name: Schedule 4 - End time
          description: "Night scene end time (24-hour format)"
          default: "23:00"
          selector:
            time: {}
        
        schedule_4_scene:
          name: Schedule 4 - Scene
          description: "Scene to activate during night hours"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Schedule 5: Late Night
        schedule_5_start:
          name: Schedule 5 - Start time
          description: "Late night scene start time (24-hour format)"
          default: "23:00"
          selector:
            time: {}
        
        schedule_5_end:
          name: Schedule 5 - End time
          description: "Late night scene end time (24-hour format)"
          default: "06:00"
          selector:
            time: {}
        
        schedule_5_scene:
          name: Schedule 5 - Scene
          description: "Scene to activate during late night hours"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Fallback scene (when no schedule matches)
        default_scene:
          name: Default scene
          description: "Scene to use when no time schedule matches"
          default: ""
          selector:
            entity:
              domain: scene
    
    mode: restart
    max_exceeded: silent
    
    variables:
      target_lights: !input target_lights
      switch_entity: !input switch_entity
      button_1_toggle: !input button_1_toggle
      button_2_brightness_up: !input button_2_brightness_up
      button_3_brightness_down: !input button_3_brightness_down
      button_4_custom: !input button_4_custom
      button_4_action: !input button_4_action
      button_1_long_press: !input button_1_long_press
      button_1_long_action: !input button_1_long_action
      button_4_long_press: !input button_4_long_press
      button_4_long_action: !input button_4_long_action
      room_relax_scene: !input room_relax_scene
      scene_entities: !input scene_entities
      custom_service: !input custom_service
      custom_service_data: !input custom_service_data
      brightness_step: !input brightness_step
      min_brightness: !input min_brightness
      max_brightness: !input max_brightness
      time_schedule_enabled: !input time_schedule_enabled
      schedule_1_start: !input schedule_1_start
      schedule_1_end: !input schedule_1_end
      schedule_1_scene: !input schedule_1_scene
      schedule_2_start: !input schedule_2_start
      schedule_2_end: !input schedule_2_end
      schedule_2_scene: !input schedule_2_scene
      schedule_3_start: !input schedule_3_start
      schedule_3_end: !input schedule_3_end
      schedule_3_scene: !input schedule_3_scene
      schedule_4_start: !input schedule_4_start
      schedule_4_end: !input schedule_4_end
      schedule_4_scene: !input schedule_4_scene
      schedule_5_start: !input schedule_5_start
      schedule_5_end: !input schedule_5_end
      schedule_5_scene: !input schedule_5_scene
      default_scene: !input default_scene
    
    trigger:
      - platform: event
        event_type: hue_event
    
    condition:
      - condition: template
        value_template: >
          {% set entity_name = switch_entity.split('.')[-1] %}
          {% if entity_name.endswith('_button_1') %}
            {% set expected_id = entity_name.replace('_button_1', '_button') %}
          {% elif entity_name.endswith('_button_2') %}
            {% set expected_id = entity_name.replace('_button_2', '_button') %}
          {% elif entity_name.endswith('_button_3') %}
            {% set expected_id = entity_name.replace('_button_3', '_button') %}
          {% elif entity_name.endswith('_button_4') %}
            {% set expected_id = entity_name.replace('_button_4', '_button') %}
          {% else %}
            {% set expected_id = entity_name %}
          {% endif %}
          {{ trigger.event.data.id == expected_id }}
    
    action:
      - choose:
          # Button 1: Toggle lights (short press)
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_toggle }}"
            sequence:
              - choose:
                  # Time-based scene mode: Turn on with appropriate scene based on current time
                  - conditions:
                      - condition: template
                        value_template: "{{ time_schedule_enabled and not is_state(target_lights[0], 'on') }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set now_time = now().strftime('%H:%M') %}
                            {% set current_scene = '' %}
                            
                            # Check Schedule 1 (Morning)
                            {% if schedule_1_scene != '' %}
                              {% if schedule_1_start <= schedule_1_end %}
                                {% if now_time >= schedule_1_start and now_time <= schedule_1_end %}
                                  {% set current_scene = schedule_1_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= schedule_1_start or now_time <= schedule_1_end %}
                                  {% set current_scene = schedule_1_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            # Check Schedule 2 (Day) - only if no scene found yet
                            {% if current_scene == '' and schedule_2_scene != '' %}
                              {% if schedule_2_start <= schedule_2_end %}
                                {% if now_time >= schedule_2_start and now_time <= schedule_2_end %}
                                  {% set current_scene = schedule_2_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= schedule_2_start or now_time <= schedule_2_end %}
                                  {% set current_scene = schedule_2_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            # Check Schedule 3 (Evening) - only if no scene found yet
                            {% if current_scene == '' and schedule_3_scene != '' %}
                              {% if schedule_3_start <= schedule_3_end %}
                                {% if now_time >= schedule_3_start and now_time <= schedule_3_end %}
                                  {% set current_scene = schedule_3_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= schedule_3_start or now_time <= schedule_3_end %}
                                  {% set current_scene = schedule_3_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            # Check Schedule 4 (Night) - only if no scene found yet
                            {% if current_scene == '' and schedule_4_scene != '' %}
                              {% if schedule_4_start <= schedule_4_end %}
                                {% if now_time >= schedule_4_start and now_time <= schedule_4_end %}
                                  {% set current_scene = schedule_4_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= schedule_4_start or now_time <= schedule_4_end %}
                                  {% set current_scene = schedule_4_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            # Check Schedule 5 (Late Night) - only if no scene found yet
                            {% if current_scene == '' and schedule_5_scene != '' %}
                              {% if schedule_5_start <= schedule_5_end %}
                                {% if now_time >= schedule_5_start and now_time <= schedule_5_end %}
                                  {% set current_scene = schedule_5_scene %}
                                {% endif %}
                              {% else %}
                                {% if now_time >= schedule_5_start or now_time <= schedule_5_end %}
                                  {% set current_scene = schedule_5_scene %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                            
                            # Use default scene if no schedule matches
                            {% if current_scene == '' %}
                              {% set current_scene = default_scene %}
                            {% endif %}
                            
                            {{ current_scene }}
                  # All other cases: Simple toggle (when lights are already on or no time schedule)
                  - conditions:
                      - condition: template
                        value_template: "{{ not time_schedule_enabled or is_state(target_lights[0], 'on') }}"
                    sequence:
                      - service: light.toggle
                        target:
                          entity_id: !input target_lights
          
          # Button 1: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'all_lights_off' }}"
                    sequence:
                      - service: light.turn_off
                        target:
                          entity_id: light.home
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 2: Brightness up
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 2 }}"
              - condition: template
                value_template: "{{ button_2_brightness_up }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current + brightness_step %}
                    {% if new > max_brightness %}{{ max_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 3: Brightness down
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 3 }}"
              - condition: template
                value_template: "{{ button_3_brightness_down }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current - brightness_step %}
                    {% if new < min_brightness %}{{ min_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 4: Custom action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_custom }}"
            sequence:
              - choose:
                  # Scene cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_cycle' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene next
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_next' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene previous
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_previous' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_entities[2] if scene_entities|length > 2 else scene_entities[0] if scene_entities else '' }}"
                  
                  # Color cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'color_cycle' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input target_lights
                        data:
                          hs_color: [0, 100]  # Red
                  
                  # Custom service
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 4: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'room_relax_scene' and room_relax_scene != '' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ room_relax_scene }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"

