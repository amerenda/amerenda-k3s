apiVersion: v1
kind: ConfigMap
metadata:
  name: homeassistant-blueprints
data:
  room_motion_control.yaml: |
    blueprint:
      name: "Room - Motion Control (scheduled scene, per-window options)"
      description: >
        On motion: optionally turn on using script.scheduled_light_on based on current schedule slot
        (morning/day/evening/night). For each window you can block "turn-on" and set an auto-off
        timeout after motion clears. Supports per-room schedule overrides via helpers.
      domain: "automation"
    
      input:
        room_key:
          name: "Room Key"
          description: "Short name used by scenes: scene.<room_key>_(morning|day|evening|night)"
          selector: { text: {} }
    
        target_lights:
          name: "Target lights (group or list)"
          selector: { target: { entity: { domain: "light" } } }
    
        motion_sensor:
          name: "Motion sensor (binary_sensor)"
          selector: { entity: { domain: "binary_sensor" } }
    
        motion_enabled:
          name: "Motion Control Enabled (input_boolean)"
          description: "If OFF, motion won't control lights in this room."
          selector: { entity: { domain: "input_boolean" } }
    
        # ---- Optional: pass your per-room schedule overrides to scheduled_light_on
        custom_schedule_enabled:
          name: "(Optional) Custom schedule enabled boolean"
          default:
          selector: { entity: { domain: "input_boolean" } }
        custom_s1_start:
          name: "(Optional) Morning start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s2_start:
          name: "(Optional) Day start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s3_start:
          name: "(Optional) Evening start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s4_start:
          name: "(Optional) Night start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
    
        # ---- Per-window controls (helpers optional; defaults provided)
        morning_block_helper:
          name: "(Optional) Block motion ON during Morning (input_boolean)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        day_block_helper:
          name: "(Optional) Block motion ON during Day (input_boolean)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        evening_block_helper:
          name: "(Optional) Block motion ON during Evening (input_boolean)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        night_block_helper:
          name: "(Optional) Block motion ON during Night (input_boolean)"
          default:
          selector: { entity: { domain: "input_boolean" } }
    
        morning_auto_off_default:
          name: "Morning auto-off (minutes, default if no helper)"
          default: 5
          selector: { number: { min: 0, max: 240, mode: "slider" } }
        morning_auto_off_helper:
          name: "(Optional) Morning auto-off helper (input_number)"
          default:
          selector: { entity: { domain: "input_number" } }
    
        day_auto_off_default:
          name: "Day auto-off (minutes, default if no helper)"
          default: 5
          selector: { number: { min: 0, max: 240, mode: "slider" } }
        day_auto_off_helper:
          name: "(Optional) Day auto-off helper (input_number)"
          default:
          selector: { entity: { domain: "input_number" } }
    
        evening_auto_off_default:
          name: "Evening auto-off (minutes, default if no helper)"
          default: 10
          selector: { number: { min: 0, max: 240, mode: "slider" } }
        evening_auto_off_helper:
          name: "(Optional) Evening auto-off helper (input_number)"
          default:
          selector: { entity: { domain: "input_number" } }
    
        night_auto_off_default:
          name: "Night auto-off (minutes, default if no helper)"
          default: 1
          selector: { number: { min: 0, max: 240, mode: "slider" } }
        night_auto_off_helper:
          name: "(Optional) Night auto-off helper (input_number)"
          default:
          selector: { entity: { domain: "input_number" } }
    
    mode: "restart"
    max_exceeded: "silent"
    
    variables:
      # Materialize optional schedule inputs
      custom_schedule_enabled_input: !input custom_schedule_enabled
      custom_s1_start_input: !input custom_s1_start
      custom_s2_start_input: !input custom_s2_start
      custom_s3_start_input: !input custom_s3_start
      custom_s4_start_input: !input custom_s4_start
    
      default_s1: "06:00:00"
      default_s2: "09:00:00"
      default_s3: "17:00:00"
      default_s4: "22:00:00"
    
      use_custom: >-
        {{ custom_schedule_enabled_input is not none and
           custom_schedule_enabled_input != '' and
           is_state(custom_schedule_enabled_input, 'on') }}
    
      s1_str: >-
        {% set v = states(custom_s1_start_input) if use_custom else default_s1 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
      s2_str: >-
        {% set v = states(custom_s2_start_input) if use_custom else default_s2 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
      s3_str: >-
        {% set v = states(custom_s3_start_input) if use_custom else default_s3 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
      s4_str: >-
        {% set v = states(custom_s4_start_input) if use_custom else default_s4 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}
    
      now_ts: "{{ as_timestamp(now()) }}"
      s1: "{{ as_timestamp(today_at(s1_str)) }}"
      s2: "{{ as_timestamp(today_at(s2_str)) }}"
      s3: "{{ as_timestamp(today_at(s3_str)) }}"
      s4: "{{ as_timestamp(today_at(s4_str)) }}"
    
      slot: >-
        {% if now_ts >= s1 and now_ts < s2 %}morning
        {% elif now_ts >= s2 and now_ts < s3 %}day
        {% elif now_ts >= s3 and now_ts < s4 %}evening
        {% else %}night{% endif %}
    
      block_morning: "{{ is_state(morning_block_helper, 'on') if morning_block_helper else false }}"
      block_day: "{{ is_state(day_block_helper, 'on') if day_block_helper else false }}"
      block_evening: "{{ is_state(evening_block_helper, 'on') if evening_block_helper else false }}"
      block_night: "{{ is_state(night_block_helper, 'on') if night_block_helper else false }}"
    
      morning_auto_off_mins: >-
        {{ (states(morning_auto_off_helper) | int(0)) if morning_auto_off_helper else (morning_auto_off_default | int) }}
      day_auto_off_mins: >-
        {{ (states(day_auto_off_helper) | int(0)) if day_auto_off_helper else (day_auto_off_default | int) }}
      evening_auto_off_mins: >-
        {{ (states(evening_auto_off_helper) | int(0)) if evening_auto_off_helper else (evening_auto_off_default | int) }}
      night_auto_off_mins: >-
        {{ (states(night_auto_off_helper) | int(0)) if night_auto_off_helper else (night_auto_off_default | int) }}
    
      block_current: >-
        {% set map = {'morning': block_morning, 'day': block_day, 'evening': block_evening, 'night': block_night} %}
        {{ map[slot] }}
      auto_off_current_mins: >-
        {% set map = {
          'morning': morning_auto_off_mins,
          'day': day_auto_off_mins,
          'evening': evening_auto_off_mins,
          'night': night_auto_off_mins
        } %}
        {{ map[slot] | int(0) }}
    
    trigger:
      - platform: "state"
        entity_id: !input motion_sensor  # yamllint disable-line quoted-strings
        to: "on"
        id: "motion_on"
    
      - platform: "state"
        entity_id: !input motion_sensor  # yamllint disable-line quoted-strings
        to: "off"
        id: "motion_off"
    
    condition: []
    
    action:
      - choose:
          - conditions:
              - condition: "trigger"
                id: "motion_on"
              - condition: "state"
                entity_id: !input motion_enabled  # yamllint disable-line quoted-strings
                state: "on"
              - condition: "template"
                value_template: "{{ not block_current }}"
            sequence:
              - service: "script.scheduled_light_on"
                data:
                  room_key: !input room_key  # yamllint disable-line quoted-strings
                  custom_schedule_enabled: "{{ custom_schedule_enabled_input }}"
                  custom_s1_start: "{{ custom_s1_start_input }}"
                  custom_s2_start: "{{ custom_s2_start_input }}"
                  custom_s3_start: "{{ custom_s3_start_input }}"
                  custom_s4_start: "{{ custom_s4_start_input }}"
    
          - conditions:
              - condition: "trigger"
                id: "motion_off"
              - condition: "state"
                entity_id: !input motion_enabled  # yamllint disable-line quoted-strings
                state: "on"
            sequence:
              - if:
                  - condition: "template"
                    value_template: "{{ auto_off_current_mins | int(0) > 0 }}"
                then:
                  - delay:
                      minutes: "{{ auto_off_current_mins | int(0) }}"
                  - condition: "state"
                    entity_id: !input motion_sensor  # yamllint disable-line quoted-strings
                    state: "off"
                  - service: "light.turn_off"
                    target: !input target_lights
  room_switch_control.yaml: |
    blueprint:
      name: "Room - Switch Control (Hue Dimmer, scheduled scenes)"
      description: >
        Map Hue 4-button dimmer actions to room lighting. Defaults use scheduled_light_on
        for ON/toggle and provide brightness adjustments, scene cycling, and all-off.
        Optional input_select helpers (one per press type) can override actions via dashboard.
        Uses hue_event triggers via hue_event_id.
      domain: "automation"
    
      input:
        target_lights:
          name: "Target lights (group or list)"
          selector:
            target:
              entity:
                domain: "light"
    
        hue_event_id:
          name: "Hue event ID (for hue_event compatibility)"
          description: "Example: living_room_switch_button"
          selector:
            text: {}
    
        # ---- Optional schedule passthrough for scheduled_light_on
        custom_schedule_enabled:
          name: "(Optional) Custom schedule enabled boolean"
          default:
          selector:
            entity:
              domain: "input_boolean"
        custom_s1_start:
          name: "(Optional) Morning start (time-only)"
          default:
          selector:
            entity:
              domain: "input_datetime"
        custom_s2_start:
          name: "(Optional) Day start (time-only)"
          default:
          selector:
            entity:
              domain: "input_datetime"
        custom_s3_start:
          name: "(Optional) Evening start (time-only)"
          default:
          selector:
            entity:
              domain: "input_datetime"
        custom_s4_start:
          name: "(Optional) Night start (time-only)"
          default:
          selector:
            entity:
              domain: "input_datetime"
    
        # ---- Optional scene cycle memory helper
        scene_cycle_helper:
          name: "(Optional) Scene cycle helper (input_select)"
          description: >
            Stores the CURRENT slot; cycles morning→day→evening→night.
            Defaults to input_select.<light_entity_name>_scene_cycle
          default: ""
          selector:
            entity:
              domain: "input_select"
    
        # ---- Optional brightness helpers
        brightness_step_helper:
          name: "(Optional) Brightness step helper (input_number, %)"
          description: "e.g. input_number.<room>_brightness_step_pct"
          default:
          selector:
            entity:
              domain: "input_number"
        min_brightness_helper:
          name: "(Optional) Min brightness helper (input_number, %)"
          description: "e.g. input_number.<room>_min_brightness_pct"
          default:
          selector:
            entity:
              domain: "input_number"
        max_brightness_helper:
          name: "(Optional) Max brightness helper (input_number, %)"
          description: "e.g. input_number.<room>_max_brightness_pct"
          default:
          selector:
            entity:
              domain: "input_number"
    
        # ---- Static brightness fallback values
        brightness_step_pct:
          name: "Fallback brightness step (%)"
          default: 10
          selector:
            number:
              min: 1
              max: 50
              unit_of_measurement: "%"
              mode: "slider"
    
        # ---- Optional per-button override helpers
        btn1_short_action_helper:
          name: "(Optional) Button 1 Short action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn1_long_action_helper:
          name: "(Optional) Button 1 Long action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn2_short_action_helper:
          name: "(Optional) Button 2 Short action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn2_long_action_helper:
          name: "(Optional) Button 2 Long action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn3_short_action_helper:
          name: "(Optional) Button 3 Short action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn3_long_action_helper:
          name: "(Optional) Button 3 Long action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn4_short_action_helper:
          name: "(Optional) Button 4 Short action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
        btn4_long_action_helper:
          name: "(Optional) Button 4 Long action (input_select)"
          default:
          selector:
            entity:
              domain: "input_select"
    
    mode: "restart"
    max_exceeded: "silent"
    
    variables:
      # Materialize all optional inputs so they're available in templates
      btn1_short_action_helper: !input btn1_short_action_helper
      btn1_long_action_helper: !input btn1_long_action_helper
      btn2_short_action_helper: !input btn2_short_action_helper
      btn2_long_action_helper: !input btn2_long_action_helper
      btn3_short_action_helper: !input btn3_short_action_helper
      btn3_long_action_helper: !input btn3_long_action_helper
      btn4_short_action_helper: !input btn4_short_action_helper
      btn4_long_action_helper: !input btn4_long_action_helper
    
      brightness_step_helper: !input brightness_step_helper
      min_brightness_helper: !input min_brightness_helper
      max_brightness_helper: !input max_brightness_helper
      brightness_step_pct: !input brightness_step_pct
    
      scene_cycle_helper_input: !input scene_cycle_helper
      custom_schedule_enabled: !input custom_schedule_enabled
      custom_s1_start: !input custom_s1_start
      custom_s2_start: !input custom_s2_start
      custom_s3_start: !input custom_s3_start
      custom_s4_start: !input custom_s4_start
    
      # materialize inputs so we can reference them in templates/logs
      target_lights_input: !input target_lights
    
      # Extract entity name from target_lights for scene naming
      _target_lights_raw: >-
        {{ target_lights_input.entity_id if target_lights_input.entity_id is defined else target_lights_input }}
      _target_lights_list: >-
        {% if _target_lights_raw is string and _target_lights_raw != '' %}
          {{ [_target_lights_raw] }}
        {% elif _target_lights_raw is sequence and _target_lights_raw is not string %}
          {{ _target_lights_raw | list }}
        {% else %}
          {{ [] }}
        {% endif %}
      _first_light_entity: "{{ _target_lights_list[0] if _target_lights_list|length > 0 else '' }}"
      entity_name: >-
        {% set entity = _first_light_entity %}
        {% if entity is string and entity|length >= 6 and entity[:6] == 'light.' %}
          {{ entity[6:] }}
        {% else %}
          {{ entity }}
        {% endif %}
      scene_cycle_helper: >-
        {% if scene_cycle_helper_input and scene_cycle_helper_input != '' %}
          {{ scene_cycle_helper_input }}
        {% else %}
          input_select.{{ entity_name }}_scene_cycle
        {% endif %}
    
      custom_schedule_enabled_input: !input custom_schedule_enabled
      custom_s1_start_input: !input custom_s1_start
      custom_s2_start_input: !input custom_s2_start
      custom_s3_start_input: !input custom_s3_start
      custom_s4_start_input: !input custom_s4_start
    
      # ---- Resolve per-button actions (helper overrides if provided; else defaults)
      btn1_short_action: >-
        {{ states(btn1_short_action_helper) if btn1_short_action_helper else 'toggle' }}
      btn1_long_action: >-
        {{ states(btn1_long_action_helper) if btn1_long_action_helper else 'turn_off_home' }}
    
      btn2_short_action: >-
        {{ states(btn2_short_action_helper) if btn2_short_action_helper else 'brightness_up' }}
      btn2_long_action: >-
        {{ states(btn2_long_action_helper) if btn2_long_action_helper else 'brightness_max' }}
    
      btn3_short_action: >-
        {{ states(btn3_short_action_helper) if btn3_short_action_helper else 'brightness_down' }}
      btn3_long_action: >-
        {{ states(btn3_long_action_helper) if btn3_long_action_helper else 'brightness_min' }}
    
      btn4_short_action: >-
        {{ states(btn4_short_action_helper) if btn4_short_action_helper else 'scene_cycle' }}
      btn4_long_action: >-
        {{ states(btn4_long_action_helper) if btn4_long_action_helper else 'default_scene' }}
    
      # ---- Resolve brightness from helpers, with safe fallbacks
      _step_raw: >-
        {% if brightness_step_helper %}{{ states(brightness_step_helper) }}{% else %}{{ '' }}{% endif %}
      _min_raw: >-
        {% if min_brightness_helper %}{{ states(min_brightness_helper) }}{% else %}{{ '' }}{% endif %}
      _max_raw: >-
        {% if max_brightness_helper %}{{ states(max_brightness_helper) }}{% else %}{{ '' }}{% endif %}
    
      brightness_step_pct_resolved: >-
        {% set v = _step_raw %}
        {{ (v | int(10)) if v not in ['unknown','unavailable','', None] else (brightness_step_pct | int) }}
    
      min_brightness_pct_resolved: >-
        {% set v = _min_raw %}
        {{ (v | int(1)) if v not in ['unknown','unavailable','', None] else 1 }}
    
      max_brightness_pct_resolved: >-
        {% set v = _max_raw %}
        {{ (v | int(100)) if v not in ['unknown','unavailable','', None] else 100 }}
    
      # ---- Time window / slot calc
      default_s1: "06:00:00"
      default_s2: "09:00:00"
      default_s3: "17:00:00"
      default_s4: "22:00:00"
    
      use_custom: >-
        {{ custom_schedule_enabled_input is not none and
           custom_schedule_enabled_input != '' and
           is_state(custom_schedule_enabled_input, 'on') }}
    
      s1_str: >-
        {% set v = states(custom_s1_start_input) if use_custom else default_s1 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
      s2_str: >-
        {% set v = states(custom_s2_start_input) if use_custom else default_s2 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
      s3_str: >-
        {% set v = states(custom_s3_start_input) if use_custom else default_s3 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
      s4_str: >-
        {% set v = states(custom_s4_start_input) if use_custom else default_s4 %}
        {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}
    
      now_ts: "{{ as_timestamp(now()) }}"
      s1: "{{ as_timestamp(today_at(s1_str)) }}"
      s2: "{{ as_timestamp(today_at(s2_str)) }}"
      s3: "{{ as_timestamp(today_at(s3_str)) }}"
      s4: "{{ as_timestamp(today_at(s4_str)) }}"
    
      current_slot: >-
        {% if now_ts >= s1 and now_ts < s2 %}morning
        {% elif now_ts >= s2 and now_ts < s3 %}day
        {% elif now_ts >= s3 and now_ts < s4 %}evening
        {% else %}night{% endif %}
    
    trigger:
      # Event-based triggers (Philips Hue v2 "hue_event")
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "initial_press"
          subtype: 1
        id: e1_short
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "long_press"
          subtype: 1
        id: e1_long
    
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "initial_press"
          subtype: 2
        id: e2_short
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "long_press"
          subtype: 2
        id: e2_long
    
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "initial_press"
          subtype: 3
        id: e3_short
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "long_press"
          subtype: 3
        id: e3_long
    
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "short_release"
          subtype: 4
        id: e4_short
      - platform: "event"
        event_type: "hue_event"
        event_data:
          id: !input hue_event_id
          type: "long_press"
          subtype: 4
        id: e4_long
    
    action:
      # First: debug log so we SEE if the trigger actually fired
      - service: "logbook.log"
        data:
          name: "room_switch_control"
          message: >-
            Trigger {{ trigger.id }} mapped for lights {{ target_lights_input }}.
            Entity name: {{ entity_name }}.
    
      # Resolve which logical action to run for this trigger
      - variables:
          action_key: >-
            {% set id = trigger.id %}
            {% if id == 'e1_short' %}{{ btn1_short_action }}
            {% elif id == 'e1_long' %}{{ btn1_long_action }}
            {% elif id == 'e2_short' %}{{ btn2_short_action }}
            {% elif id == 'e2_long' %}{{ btn2_long_action }}
            {% elif id == 'e3_short' %}{{ btn3_short_action }}
            {% elif id == 'e3_long' %}{{ btn3_long_action }}
            {% elif id == 'e4_short' %}{{ btn4_short_action }}
            {% elif id == 'e4_long' %}{{ btn4_long_action }}
            {% else %}unknown{% endif %}
    
      - service: "logbook.log"
        data:
          name: "room_switch_control"
          message: >-
            action_key={{ action_key }}
    
      - choose:
          # --- toggle -> call room_toggle with only the supported args
          - conditions: "{{ action_key == 'toggle' }}"
            sequence:
              - service: "script.room_toggle"
                data:
                  target_lights: >-
                    {{ target_lights_input.entity_id if target_lights_input.entity_id is defined else target_lights_input }}
                  custom_schedule_enabled: "{{ custom_schedule_enabled }}"
                  custom_s1_start: "{{ custom_s1_start }}"
                  custom_s2_start: "{{ custom_s2_start }}"
                  custom_s3_start: "{{ custom_s3_start }}"
                  custom_s4_start: "{{ custom_s4_start }}"
    
          # --- scheduled_on/default_scene -> directly call scheduled_light_on with schedule overrides
          - conditions: "{{ action_key == 'scheduled_on' or action_key == 'default_scene' }}"
            sequence:
              - service: "script.scheduled_light_on"
                data:
                  custom_schedule_enabled: "{{ custom_schedule_enabled_input }}"
                  custom_s1_start: "{{ custom_s1_start_input }}"
                  custom_s2_start: "{{ custom_s2_start_input }}"
                  custom_s3_start: "{{ custom_s3_start_input }}"
                  custom_s4_start: "{{ custom_s4_start_input }}"
                  fallback_lights: >-
                    {{ target_lights_input.entity_id if target_lights_input.entity_id is defined else target_lights_input }}
    
          - conditions: "{{ action_key == 'all_off' }}"
            sequence:
              - service: "light.turn_off"
                target: !input target_lights
    
          - conditions: "{{ action_key == 'brightness_up' }}"
            sequence:
              - service: "light.turn_on"
                target: !input target_lights
                data:
                  brightness_step_pct: "{{ brightness_step_pct_resolved | int }}"
    
          - conditions: "{{ action_key == 'brightness_down' }}"
            sequence:
              - service: "light.turn_on"
                target: !input target_lights
                data:
                  brightness_step_pct: "{{ 0 - (brightness_step_pct_resolved | int) }}"
    
          - conditions: "{{ action_key == 'brightness_min' }}"
            sequence:
              - service: "light.turn_on"
                target: !input target_lights
                data:
                  brightness_pct: "{{ min_brightness_pct_resolved | int }}"
    
          - conditions: "{{ action_key == 'brightness_max' }}"
            sequence:
              - service: "light.turn_on"
                target: !input target_lights
                data:
                  brightness_pct: "{{ max_brightness_pct_resolved | int }}"
    
          - conditions: "{{ action_key == 'scene_cycle' }}"
            sequence:
              - variables:
                  order: ['morning', 'day', 'evening', 'night']
                  cur_slot: >-
                    {% if scene_cycle_helper %}
                      {{ states(scene_cycle_helper) | default(current_slot) }}
                    {% else %}
                      {{ current_slot }}
                    {% endif %}
                  idx: "{{ order.index(cur_slot) if cur_slot in order else 0 }}"
                  next_slot: "{{ order[(idx + 1) % order | length] }}"
                  scene_to_activate: "scene.{{ entity_name }}_{{ next_slot }}"
              - service: "logbook.log"
                data:
                  name: "scene_cycle DEBUG"
                  message: >-
                    helper={{ scene_cycle_helper }}, cur_slot={{ cur_slot }},
                    next_slot={{ next_slot }}, scene={{ scene_to_activate }}
              - if:
                  - condition: template
                    value_template: "{{ scene_cycle_helper is not none and scene_cycle_helper != '' }}"
                then:
                  - service: "input_select.select_option"
                    target:
                      entity_id: "{{ scene_cycle_helper }}"
                    data:
                      option: "{{ next_slot }}"
              - service: "scene.turn_on"
                target:
                  entity_id: "{{ scene_to_activate }}"
    
          - conditions: "{{ action_key == 'turn_off_home' }}"
            sequence:
              - service: "light.turn_off"
                target:
                  entity_id: light.home
    
  room_timer_control.yaml: |
    blueprint:
      name: "Room - Timer Control (apply scene at window start)"
      description: >
        On each time window start (morning/day/evening/night), optionally auto-turn-on
        or only update scene on currently-on lights. Uses the same shared custom schedule
        as other automations.
      domain: "automation"
    
      input:
        room_key:
          name: "Room Key"
          description: "Short name used by scenes: scene.<room_key>_(morning|day|evening|night)"
          selector: { text: {} }
    
        target_lights:
          name: "Target lights (group or list)"
          selector: { target: { entity: { domain: "light" } } }
    
        # Shared schedule helpers
        custom_schedule_enabled:
          name: "(Optional) Custom schedule enabled boolean"
          default:
          selector: { entity: { domain: "input_boolean" } }
        custom_s1_start:
          name: "(Optional) Morning start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s2_start:
          name: "(Optional) Day start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s3_start:
          name: "(Optional) Evening start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
        custom_s4_start:
          name: "(Optional) Night start (time-only)"
          default:
          selector: { entity: { domain: "input_datetime" } }
    
        # Per-window controls (helpers; can be shared booleans or per-room ones)
        enable_morning_helper:
          name: "Morning Enabled (input_boolean, default ON if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        auto_on_morning_helper:
          name: "Morning Auto-on (input_boolean, default OFF if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
    
        enable_day_helper:
          name: "Day Enabled (input_boolean, default ON if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        auto_on_day_helper:
          name: "Day Auto-on (input_boolean, default OFF if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
    
        enable_evening_helper:
          name: "Evening Enabled (input_boolean, default ON if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        auto_on_evening_helper:
          name: "Evening Auto-on (input_boolean, default OFF if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
    
        enable_night_helper:
          name: "Night Enabled (input_boolean, default ON if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
        auto_on_night_helper:
          name: "Night Auto-on (input_boolean, default OFF if empty)"
          default:
          selector: { entity: { domain: "input_boolean" } }
    
    mode: "restart"
    max_exceeded: "silent"
    
    variables:
      # Materialize optional schedule inputs
      custom_schedule_enabled_input: !input custom_schedule_enabled
      custom_s1_start_input: !input custom_s1_start
      custom_s2_start_input: !input custom_s2_start
      custom_s3_start_input: !input custom_s3_start
      custom_s4_start_input: !input custom_s4_start
    
      # Materialize enable/auto_on helpers
      enable_morning_helper_input: !input enable_morning_helper
      auto_on_morning_helper_input: !input auto_on_morning_helper
      enable_day_helper_input: !input enable_day_helper
      auto_on_day_helper_input: !input auto_on_day_helper
      enable_evening_helper_input: !input enable_evening_helper
      auto_on_evening_helper_input: !input auto_on_evening_helper
      enable_night_helper_input: !input enable_night_helper
      auto_on_night_helper_input: !input auto_on_night_helper
    
      room_key_var: !input room_key
      target_lights_var: !input target_lights
    
      default_s1: "06:00:00"
      default_s2: "09:00:00"
      default_s3: "17:00:00"
      default_s4: "22:00:00"
    
      # Check per-time-window custom times
      morning_custom: >-
        {% set helper = 'input_boolean.' ~ room_key_var ~ '_morning_custom_time' %}
        {% set state_val = states(helper) %}
        {% if state_val not in ['unknown', 'unavailable', None, ''] %}
          {{ is_state(helper, 'on') }}
        {% elif custom_schedule_enabled_input is not none and custom_schedule_enabled_input != '' %}
          {{ is_state(custom_schedule_enabled_input, 'on') }}
        {% else %}
          {{ false }}
        {% endif %}
      day_custom: >-
        {% set helper = 'input_boolean.' ~ room_key_var ~ '_day_custom_time' %}
        {% set state_val = states(helper) %}
        {% if state_val not in ['unknown', 'unavailable', None, ''] %}
          {{ is_state(helper, 'on') }}
        {% elif custom_schedule_enabled_input is not none and custom_schedule_enabled_input != '' %}
          {{ is_state(custom_schedule_enabled_input, 'on') }}
        {% else %}
          {{ false }}
        {% endif %}
      evening_custom: >-
        {% set helper = 'input_boolean.' ~ room_key_var ~ '_evening_custom_time' %}
        {% set state_val = states(helper) %}
        {% if state_val not in ['unknown', 'unavailable', None, ''] %}
          {{ is_state(helper, 'on') }}
        {% elif custom_schedule_enabled_input is not none and custom_schedule_enabled_input != '' %}
          {{ is_state(custom_schedule_enabled_input, 'on') }}
        {% else %}
          {{ false }}
        {% endif %}
      night_custom: >-
        {% set helper = 'input_boolean.' ~ room_key_var ~ '_night_custom_time' %}
        {% set state_val = states(helper) %}
        {% if state_val not in ['unknown', 'unavailable', None, ''] %}
          {{ is_state(helper, 'on') }}
        {% elif custom_schedule_enabled_input is not none and custom_schedule_enabled_input != '' %}
          {{ is_state(custom_schedule_enabled_input, 'on') }}
        {% else %}
          {{ false }}
        {% endif %}
    
      s1_str: >-
        {% if morning_custom %}
          {% set v = states('input_datetime.' ~ room_key_var ~ '_s1_start') %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
        {% elif custom_s1_start_input %}
          {% set v = states(custom_s1_start_input) %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
        {% else %}
          {{ default_s1 }}
        {% endif %}
      s2_str: >-
        {% if day_custom %}
          {% set v = states('input_datetime.' ~ room_key_var ~ '_s2_start') %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
        {% elif custom_s2_start_input %}
          {% set v = states(custom_s2_start_input) %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
        {% else %}
          {{ default_s2 }}
        {% endif %}
      s3_str: >-
        {% if evening_custom %}
          {% set v = states('input_datetime.' ~ room_key_var ~ '_s3_start') %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
        {% elif custom_s3_start_input %}
          {% set v = states(custom_s3_start_input) %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
        {% else %}
          {{ default_s3 }}
        {% endif %}
      s4_str: >-
        {% if night_custom %}
          {% set v = states('input_datetime.' ~ room_key_var ~ '_s4_start') %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}
        {% elif custom_s4_start_input %}
          {% set v = states(custom_s4_start_input) %}
          {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}
        {% else %}
          {{ default_s4 }}
        {% endif %}
    
      # Extract time portion (HH:MM) from datetime string
      # Handles formats like "19:24:00" or "2024-01-01 19:24:00"
      s1: >-
        {% set raw = s1_str %}
        {% if ' ' in raw %}{{ raw.split(' ')[-1][:5] }}{% else %}{{ raw[:5] }}{% endif %}
      s2: >-
        {% set raw = s2_str %}
        {% if ' ' in raw %}{{ raw.split(' ')[-1][:5] }}{% else %}{{ raw[:5] }}{% endif %}
      s3: >-
        {% set raw = s3_str %}
        {% if ' ' in raw %}{{ raw.split(' ')[-1][:5] }}{% else %}{{ raw[:5] }}{% endif %}
      s4: >-
        {% set raw = s4_str %}
        {% if ' ' in raw %}{{ raw.split(' ')[-1][:5] }}{% else %}{{ raw[:5] }}{% endif %}
    
      now_hm: "{{ now().strftime('%H:%M') }}"
    
      # Window enable/auto_on booleans with sensible defaults
      en_morning: >-
        {% if enable_morning_helper_input %}
          {{ is_state(enable_morning_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.enable_' ~ room_key_var ~ '_morning' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else true }}
        {% endif %}
      ao_morning: >-
        {% if auto_on_morning_helper_input %}
          {{ is_state(auto_on_morning_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.auto_on_' ~ room_key_var ~ '_morning' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else false }}
        {% endif %}
      en_day: >-
        {% if enable_day_helper_input %}
          {{ is_state(enable_day_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.enable_' ~ room_key_var ~ '_day' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else true }}
        {% endif %}
      ao_day: >-
        {% if auto_on_day_helper_input %}
          {{ is_state(auto_on_day_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.auto_on_' ~ room_key_var ~ '_day' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else false }}
        {% endif %}
      en_evening: >-
        {% if enable_evening_helper_input %}
          {{ is_state(enable_evening_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.enable_' ~ room_key_var ~ '_evening' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else true }}
        {% endif %}
      ao_evening: >-
        {% if auto_on_evening_helper_input %}
          {{ is_state(auto_on_evening_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.auto_on_' ~ room_key_var ~ '_evening' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else false }}
        {% endif %}
      en_night: >-
        {% if enable_night_helper_input %}
          {{ is_state(enable_night_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.enable_' ~ room_key_var ~ '_night' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else true }}
        {% endif %}
      ao_night: >-
        {% if auto_on_night_helper_input %}
          {{ is_state(auto_on_night_helper_input, 'on') }}
        {% else %}
          {% set helper = 'input_boolean.auto_on_' ~ room_key_var ~ '_night' %}
          {{ is_state(helper, 'on') if states(helper) not in ['unknown', 'unavailable'] else false }}
        {% endif %}
    
      fired_slot: >-
        {% if now_hm == s1 %}morning
        {% elif now_hm == s2 %}day
        {% elif now_hm == s3 %}evening
        {% elif now_hm == s4 %}night
        {% else %}none{% endif %}
    
    trigger:
      # Evaluate every minute; if it matches any boundary, the action will run
      - platform: "time_pattern"
        minutes: "/1"
        id: "timer_check"
    
    action:
      # CRITICAL: Simple log FIRST - no template variables
      - service: "logbook.log"
        data:
          name: "room_timer_control"
          message: "AUTOMATION ACTION STARTED"
      
      # CRITICAL: Log with template variables
      - service: "logbook.log"
        data_template:
          name: "room_timer_control"
          message: "=== AUTOMATION STARTED === room={{ room_key_var }}, time={{ now_hm }}, fired_slot={{ fired_slot }}"
      
      - variables:
          # Extract target entity IDs safely
          _targets_raw: >-
            {% if target_lights_var is mapping and 'entity_id' in target_lights_var %}
              {{ target_lights_var.entity_id }}
            {% elif target_lights_var is mapping %}
              {{ '' }}
            {% else %}
              {{ target_lights_var }}
            {% endif %}
          any_on: >-
            {% if _targets_raw %}
              {% set expanded = expand(_targets_raw) %}
              {{ expanded | selectattr('state','eq','on') | list | count > 0 }}
            {% else %}
              {{ false }}
            {% endif %}
    
      # Debug logging - this should appear every minute if automation is running
      - service: "logbook.log"
        data:
          name: "room_timer_control"
          message: >-
            [{{ room_key_var }}] Time={{ now_hm }}, Slots: s1={{ s1 }}, s2={{ s2 }}, s3={{ s3 }}, s4={{ s4 }},
            fired={{ fired_slot }}, en_night={{ en_night }}, ao_night={{ ao_night }}, lights_on={{ any_on }}
    
      - choose:
          - conditions: "{{ fired_slot == 'morning' and en_morning | bool }}"
            sequence:
              - service: "logbook.log"
                data:
                  name: "room_timer_control"
                  message: >-
                    Morning slot matched! en_morning={{ en_morning }}
              - choose:
                  - conditions: "{{ any_on or ao_morning | bool }}"
                    sequence:
                      - variables:
                          script_data_dict: >-
                            {% set fb = target_lights_var.entity_id if target_lights_var is mapping else target_lights_var %}
                            {% set base = {'room_key': room_key_var, 'fallback_lights': fb, 'timer_mode': true} %}
                            {% set custom = {} %}
                            {% if custom_schedule_enabled_input and custom_schedule_enabled_input != '' and custom_schedule_enabled_input is not none %}{% set custom = custom | combine({'custom_schedule_enabled': custom_schedule_enabled_input}) %}{% endif %}
                            {% if custom_s1_start_input and custom_s1_start_input != '' and custom_s1_start_input is not none %}{% set custom = custom | combine({'custom_s1_start': custom_s1_start_input}) %}{% endif %}
                            {% if custom_s2_start_input and custom_s2_start_input != '' and custom_s2_start_input is not none %}{% set custom = custom | combine({'custom_s2_start': custom_s2_start_input}) %}{% endif %}
                            {% if custom_s3_start_input and custom_s3_start_input != '' and custom_s3_start_input is not none %}{% set custom = custom | combine({'custom_s3_start': custom_s3_start_input}) %}{% endif %}
                            {% if custom_s4_start_input and custom_s4_start_input != '' and custom_s4_start_input is not none %}{% set custom = custom | combine({'custom_s4_start': custom_s4_start_input}) %}{% endif %}
                            {{ base | combine(custom) }}
                      - service: "script.scheduled_light_on"
                        data: "{{ script_data_dict }}"
    
          - conditions: "{{ fired_slot == 'day' and en_day | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_day | bool }}"
                    sequence:
                      - variables:
                          script_data_dict: >-
                            {% set fb = target_lights_var.entity_id if target_lights_var is mapping else target_lights_var %}
                            {% set base = {'room_key': room_key_var, 'fallback_lights': fb, 'timer_mode': true} %}
                            {% set custom = {} %}
                            {% if custom_schedule_enabled_input and custom_schedule_enabled_input != '' and custom_schedule_enabled_input is not none %}{% set custom = custom | combine({'custom_schedule_enabled': custom_schedule_enabled_input}) %}{% endif %}
                            {% if custom_s1_start_input and custom_s1_start_input != '' and custom_s1_start_input is not none %}{% set custom = custom | combine({'custom_s1_start': custom_s1_start_input}) %}{% endif %}
                            {% if custom_s2_start_input and custom_s2_start_input != '' and custom_s2_start_input is not none %}{% set custom = custom | combine({'custom_s2_start': custom_s2_start_input}) %}{% endif %}
                            {% if custom_s3_start_input and custom_s3_start_input != '' and custom_s3_start_input is not none %}{% set custom = custom | combine({'custom_s3_start': custom_s3_start_input}) %}{% endif %}
                            {% if custom_s4_start_input and custom_s4_start_input != '' and custom_s4_start_input is not none %}{% set custom = custom | combine({'custom_s4_start': custom_s4_start_input}) %}{% endif %}
                            {{ base | combine(custom) }}
                      - service: "script.scheduled_light_on"
                        data: "{{ script_data_dict }}"
    
          - conditions: "{{ fired_slot == 'evening' and en_evening | bool }}"
            sequence:
              - choose:
                  - conditions: "{{ any_on or ao_evening | bool }}"
                    sequence:
                      - variables:
                          script_data_dict: >-
                            {% set fb = target_lights_var.entity_id if target_lights_var is mapping else target_lights_var %}
                            {% set base = {'room_key': room_key_var, 'fallback_lights': fb, 'timer_mode': true} %}
                            {% set custom = {} %}
                            {% if custom_schedule_enabled_input and custom_schedule_enabled_input != '' and custom_schedule_enabled_input is not none %}{% set custom = custom | combine({'custom_schedule_enabled': custom_schedule_enabled_input}) %}{% endif %}
                            {% if custom_s1_start_input and custom_s1_start_input != '' and custom_s1_start_input is not none %}{% set custom = custom | combine({'custom_s1_start': custom_s1_start_input}) %}{% endif %}
                            {% if custom_s2_start_input and custom_s2_start_input != '' and custom_s2_start_input is not none %}{% set custom = custom | combine({'custom_s2_start': custom_s2_start_input}) %}{% endif %}
                            {% if custom_s3_start_input and custom_s3_start_input != '' and custom_s3_start_input is not none %}{% set custom = custom | combine({'custom_s3_start': custom_s3_start_input}) %}{% endif %}
                            {% if custom_s4_start_input and custom_s4_start_input != '' and custom_s4_start_input is not none %}{% set custom = custom | combine({'custom_s4_start': custom_s4_start_input}) %}{% endif %}
                            {{ base | combine(custom) }}
                      - service: "script.scheduled_light_on"
                        data: "{{ script_data_dict }}"
    
          - conditions: "{{ fired_slot == 'night' and en_night | bool }}"
            sequence:
              - service: "logbook.log"
                data:
                  name: "room_timer_control"
                  message: >-
                    Night slot detected! en_night={{ en_night }}, any_on={{ any_on }}, ao_night={{ ao_night }}
              - service: "logbook.log"
                data:
                  name: "room_timer_control"
                  message: >-
                    Night slot detected! en_night={{ en_night }}, any_on={{ any_on }}, ao_night={{ ao_night }}
              - choose:
                  - conditions: "{{ any_on or ao_night | bool }}"
                    sequence:
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            Condition passed: any_on={{ any_on }} OR ao_night={{ ao_night }}
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            Firing night scene for room {{ room_key_var }}, target_lights={{ _targets_raw }}
                      - variables:
                          _fb_var: >-
                            {% if target_lights_var is mapping and 'entity_id' in target_lights_var %}
                              {{ target_lights_var.entity_id }}
                            {% elif target_lights_var is mapping %}
                              {{ '' }}
                            {% else %}
                              {{ target_lights_var }}
                            {% endif %}
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            About to call script with fallback_lights={{ _fb_var }}, timer_mode=true
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            Calling script.scheduled_light_on with fallback_lights={{ _fb_var }}, timer_mode=true
                      - service: "script.scheduled_light_on"
                        data_template:
                          fallback_lights: "{{ _fb_var }}"
                          timer_mode: true
                          custom_schedule_enabled: "{{ custom_schedule_enabled_input if custom_schedule_enabled_input and custom_schedule_enabled_input != '' and custom_schedule_enabled_input is not none else '' }}"
                          custom_s1_start: "{{ custom_s1_start_input if custom_s1_start_input and custom_s1_start_input != '' and custom_s1_start_input is not none else '' }}"
                          custom_s2_start: "{{ custom_s2_start_input if custom_s2_start_input and custom_s2_start_input != '' and custom_s2_start_input is not none else '' }}"
                          custom_s3_start: "{{ custom_s3_start_input if custom_s3_start_input and custom_s3_start_input != '' and custom_s3_start_input is not none else '' }}"
                          custom_s4_start: "{{ custom_s4_start_input if custom_s4_start_input and custom_s4_start_input != '' and custom_s4_start_input is not none else '' }}"
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            Script call completed (should see script logs above if successful)
                  - conditions: []
                    sequence:
                      - service: "logbook.log"
                        data:
                          name: "room_timer_control"
                          message: >-
                            Night scene NOT fired: lights are off (any_on={{ any_on }}) and auto-on is disabled (ao_night={{ ao_night }})
                          entity_id: "{{ _targets_raw }}"
    
