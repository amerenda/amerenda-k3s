apiVersion: v1
kind: ConfigMap
metadata:
  name: ha-blueprints-defaults
  namespace: home-assistant
  annotations:
    reloader.stakater.com/auto: "true"
data:
  hue_night_light_defaults.yaml: |
    blueprint:
      name: Hue - Night Light Defaults
      description: >
        Apply night light defaults to Hue lights when the light turns ON during the
        configured night window. Designed to work with the Hue Switch Control blueprint.
        Focuses on night light settings with warm colors and low brightness.
        Note: Switch events are not handled here. Use hue_switch_control.yaml for switch->on logic.
      domain: automation
      input:
        target_lights:
          name: Target lights
          selector:
            entity:
              domain: light
              multiple: true
        only_when_manual:
          name: Only when manual (for light-on trigger)
          description: Skip when HA turned the light on (context.user_id is none)
          default: true
          selector:
            boolean: {}
    
        settle_seconds:
          name: Settle seconds (for light-on trigger)
          description: "Use >= 1s to avoid race with Hue bridge updates"
          default: 1
          selector:
            number:
              min: 1
              max: 5
              step: 1
              unit_of_measurement: s
    
        night_start_time:
          name: Night start time
          description: "Time when night mode should start (24-hour format)"
          default: "23:00"
          selector:
            time: {}
    
        night_end_time:
          name: Night end time
          description: "Time when night mode should end (24-hour format)"
          default: "05:45"
          selector:
            time: {}
    
        color_mode:
          name: Color mode
          description: "Pick 'scene' to call a Hue/HA scene (prevents flash)."
          default: scene
          selector:
            select:
              options:
                - scene
                - color_temp
                - hs
    
        # Scene mode inputs
        scene_entity:
          name: Scene entity (when color_mode = scene)
          description: "e.g. scene.living_room_night_red (must exist in HA)"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Color temp inputs
        color_temp_mireds:
          name: Color Temp (mireds)
          default: 500
          description: "Higher values = warmer light (good for night)"
          selector:
            number:
              min: 153
              max: 500
              step: 1
    
        # HS inputs
        hs_hue:
          name: HS - Hue (0-360)
          default: 30
          description: "Warm orange/red hue for night light"
          selector:
            number:
              min: 0
              max: 360
              step: 1
        hs_sat:
          name: HS - Saturation (0-100)
          default: 20
          description: "Lower saturation for softer night light"
          selector:
            number:
              min: 0
              max: 100
              step: 1
    
        transition_secs:
          name: Transition (seconds)
          default: 1.0
          description: "Slower transition for night light"
          selector:
            number:
              min: 0
              max: 5
              step: 0.1
    
        brightness:
          name: Brightness (1-255)
          default: 50
          description: "Low brightness for night light"
          selector:
            number:
              min: 1
              max: 255
              step: 1
    
    mode: restart
    max_exceeded: silent
    
    variables:
      only_when_manual: !input only_when_manual
      night_start_time: !input night_start_time
      night_end_time: !input night_end_time
      color_mode: !input color_mode
      brightness: !input brightness
      color_temp_mireds: !input color_temp_mireds
      hs_hue: !input hs_hue
      hs_sat: !input hs_sat
      transition_secs: !input transition_secs
      scene_entity: !input scene_entity
    
    trigger:
      - id: light_on
        platform: state
        entity_id: !input target_lights
        to: "on"
        for:
          seconds: !input settle_seconds
    
    condition:
      - condition: template
        value_template: >
          {% set now_time = now().strftime('%H:%M') %}
          {% if night_start_time <= night_end_time %}
            {{ now_time >= night_start_time and now_time <= night_end_time }}
          {% else %}
            {{ now_time >= night_start_time or now_time <= night_end_time }}
          {% endif %}
    
    action:
      - choose:
          # A) Light turned ON (usually manual/Hue)
          - conditions:
              - condition: template
                value_template: "{{ trigger.id == 'light_on' }}"
              - condition: template
                alias: "If only_when_manual, require external (non-HA) turn-on"
                value_template: >
                  {% if not only_when_manual %} true
                  {% else %} {{ trigger.to_state.context.user_id is none }}
                  {% endif %}
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'scene' and scene_entity != '' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_entity }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'color_temp' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input target_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          color_temp: "{{ color_temp_mireds | int }}"
                          transition: 0
                  - conditions:
                      - condition: template
                        value_template: "{{ color_mode == 'hs' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input target_lights
                        data:
                          brightness: "{{ brightness | int }}"
                          hs_color: ["{{ hs_hue | float }}", "{{ hs_sat | float }}"]
                          transition: 0
  hue_switch_control.yaml: |
    blueprint:
      name: Hue - Switch Control (Generic)
      description: >
        Control Hue lights with a Hue switch/dimmer. Supports:
        - Button 1: Toggle lights on/off
        - Button 2: Brightness up
        - Button 3: Brightness down  
        - Button 4: Custom action (default: scene cycle)
      domain: automation
      input:
        target_lights:
          name: Target lights
          description: Lights to control with this switch
          selector:
            entity:
              domain: light
              multiple: true
        
        switch_entity:
          name: Hue switch event entity
          description: e.g. event.living_room_switch_button_1
          selector:
            entity:
              domain: event
        
        # Button 1: Toggle
        button_1_toggle:
          name: Button 1 - Toggle lights
          description: Enable toggle on/off for button 1
          default: true
          selector:
            boolean: {}
        
        # Button 2: Brightness up
        button_2_brightness_up:
          name: Button 2 - Brightness up
          description: Enable brightness up for button 2
          default: true
          selector:
            boolean: {}
        
        brightness_step:
          name: Brightness step
          description: How much to increase/decrease brightness
          default: 25
          selector:
            number:
              min: 1
              max: 100
              step: 1
        
        # Button 3: Brightness down
        button_3_brightness_down:
          name: Button 3 - Brightness down
          description: Enable brightness down for button 3
          default: true
          selector:
            boolean: {}
        
        # Button 4: Custom action
        button_4_custom:
          name: Button 4 - Custom action
          description: Enable custom action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_action:
          name: Button 4 - Action type
          description: What action to perform on button 4
          default: scene_cycle
          selector:
            select:
              options:
                - scene_cycle
                - scene_next
                - scene_previous
                - color_cycle
                - custom_service
        
        # Long press actions
        button_1_long_press:
          name: Button 1 - Long press action
          description: Enable long press action for button 1
          default: true
          selector:
            boolean: {}
        
        button_1_long_action:
          name: Button 1 - Long press action type
          description: What action to perform on button 1 long press
          default: all_lights_off
          selector:
            select:
              options:
                - all_lights_off
                - custom_service
        
        button_4_long_press:
          name: Button 4 - Long press action
          description: Enable long press action for button 4
          default: true
          selector:
            boolean: {}
        
        button_4_long_action:
          name: Button 4 - Long press action type
          description: What action to perform on button 4 long press
          default: room_relax_scene
          selector:
            select:
              options:
                - room_relax_scene
                - custom_service
        
        # Long press scene
        room_relax_scene:
          name: Room relax scene
          description: Scene to activate on button 4 long press (e.g. scene.living_room_relax)
          default: ""
          selector:
            entity:
              domain: scene
        
        # Scene cycling options
        scene_entities:
          name: Scenes to cycle through
          description: List of scenes to cycle through (for scene_cycle/next/previous)
          default: []
          selector:
            entity:
              domain: scene
              multiple: true
        
        # Custom service for button 4
        custom_service:
          name: Custom service (when action = custom_service)
          description: Service to call for button 4 custom action
          default: ""
          selector:
            text: {}
        
        custom_service_data:
          name: Custom service data
          description: Data to pass to custom service (YAML format)
          default: "{}"
          selector:
            text: {}
        
        # Brightness limits
        min_brightness:
          name: Minimum brightness
          description: Minimum brightness level (1-255)
          default: 1
          selector:
            number:
              min: 1
              max: 255
              step: 1
        
        max_brightness:
          name: Maximum brightness
          description: Maximum brightness level (1-255)
          default: 255
          selector:
            number:
              min: 1
              max: 255
              step: 1
    
        # Night mode settings
        night_start_time:
          name: Night start time
          description: "Time when night mode should start (24-hour format)"
          default: "23:00"
          selector:
            time: {}
    
        night_end_time:
          name: Night end time
          description: "Time when night mode should end (24-hour format)"
          default: "05:45"
          selector:
            time: {}
    
        night_color_mode:
          name: Night color mode
          description: "Pick 'scene' to call a Hue/HA scene (prevents flash)."
          default: scene
          selector:
            select:
              options:
                - scene
                - color_temp
                - hs
    
        # Night scene mode
        night_scene_entity:
          name: Night scene entity
          description: "e.g. scene.living_room_night_red (must exist in HA)"
          default: ""
          selector:
            entity:
              domain: scene
    
        # Night color temp
        night_color_temp_mireds:
          name: Night Color Temp (mireds)
          default: 500
          description: "Higher values = warmer light (good for night)"
          selector:
            number:
              min: 153
              max: 500
              step: 1
    
        # Night HS color
        night_hs_hue:
          name: Night HS - Hue (0-360)
          default: 30
          description: "Warm orange/red hue for night light"
          selector:
            number:
              min: 0
              max: 360
              step: 1
        night_hs_sat:
          name: Night HS - Saturation (0-100)
          default: 20
          description: "Lower saturation for softer night light"
          selector:
            number:
              min: 0
              max: 100
              step: 1
    
        night_brightness:
          name: Night brightness (1-255)
          default: 50
          description: "Low brightness for night light"
          selector:
            number:
              min: 1
              max: 255
              step: 1
    
    mode: restart
    max_exceeded: silent
    
    variables:
      target_lights: !input target_lights
      switch_entity: !input switch_entity
      button_1_toggle: !input button_1_toggle
      button_2_brightness_up: !input button_2_brightness_up
      button_3_brightness_down: !input button_3_brightness_down
      button_4_custom: !input button_4_custom
      button_4_action: !input button_4_action
      button_1_long_press: !input button_1_long_press
      button_1_long_action: !input button_1_long_action
      button_4_long_press: !input button_4_long_press
      button_4_long_action: !input button_4_long_action
      room_relax_scene: !input room_relax_scene
      scene_entities: !input scene_entities
      custom_service: !input custom_service
      custom_service_data: !input custom_service_data
      brightness_step: !input brightness_step
      min_brightness: !input min_brightness
      max_brightness: !input max_brightness
      night_start_time: !input night_start_time
      night_end_time: !input night_end_time
      night_color_mode: !input night_color_mode
      night_scene_entity: !input night_scene_entity
      night_color_temp_mireds: !input night_color_temp_mireds
      night_hs_hue: !input night_hs_hue
      night_hs_sat: !input night_hs_sat
      night_brightness: !input night_brightness
    
    trigger:
      - platform: event
        event_type: hue_event
    
    condition:
      - condition: template
        value_template: >
          {% set entity_name = switch_entity.split('.')[-1] %}
          {% if entity_name.endswith('_button_1') %}
            {% set expected_id = entity_name.replace('_button_1', '_button') %}
          {% elif entity_name.endswith('_button_2') %}
            {% set expected_id = entity_name.replace('_button_2', '_button') %}
          {% elif entity_name.endswith('_button_3') %}
            {% set expected_id = entity_name.replace('_button_3', '_button') %}
          {% elif entity_name.endswith('_button_4') %}
            {% set expected_id = entity_name.replace('_button_4', '_button') %}
          {% else %}
            {% set expected_id = entity_name %}
          {% endif %}
          {{ trigger.event.data.id == expected_id }}
    
    action:
      - choose:
          # Button 1: Toggle lights (short press)
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_toggle }}"
            sequence:
              - choose:
                  # Check if it's night time
                  - conditions:
                      - condition: template
                        value_template: >
                          {% set now_time = now().strftime('%H:%M') %}
                          {% if night_start_time <= night_end_time %}
                            {{ now_time >= night_start_time and now_time <= night_end_time }}
                          {% else %}
                            {{ now_time >= night_start_time or now_time <= night_end_time }}
                          {% endif %}
                    sequence:
                      # Night mode: Turn on with night color immediately
                      - choose:
                          - conditions:
                              - condition: template
                                value_template: "{{ night_color_mode == 'scene' and night_scene_entity != '' }}"
                            sequence:
                              - service: scene.turn_on
                                target:
                                  entity_id: "{{ night_scene_entity }}"
                          - conditions:
                              - condition: template
                                value_template: "{{ night_color_mode == 'color_temp' }}"
                            sequence:
                              - service: light.turn_on
                                target:
                                  entity_id: !input target_lights
                                data:
                                  brightness: "{{ night_brightness | int }}"
                                  color_temp: "{{ night_color_temp_mireds | int }}"
                                  transition: 0
                          - conditions:
                              - condition: template
                                value_template: "{{ night_color_mode == 'hs' }}"
                            sequence:
                              - service: light.turn_on
                                target:
                                  entity_id: !input target_lights
                                data:
                                  brightness: "{{ night_brightness | int }}"
                                  hs_color: ["{{ night_hs_hue | float }}", "{{ night_hs_sat | float }}"]
                                  transition: 0
                  # Day mode: Simple toggle
                  - conditions:
                      - condition: template
                        value_template: >
                          {% set now_time = now().strftime('%H:%M') %}
                          {% if night_start_time <= night_end_time %}
                            {{ not (now_time >= night_start_time and now_time <= night_end_time) }}
                          {% else %}
                            {{ not (now_time >= night_start_time or now_time <= night_end_time) }}
                          {% endif %}
                    sequence:
                      - service: light.toggle
                        target:
                          entity_id: !input target_lights
          
          # Button 1: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 1 }}"
              - condition: template
                value_template: "{{ button_1_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'all_lights_off' }}"
                    sequence:
                      - service: light.turn_off
                        target:
                          entity_id: light.home
                  - conditions:
                      - condition: template
                        value_template: "{{ button_1_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 2: Brightness up
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'initial_press' and trigger.event.data.subtype == 2 }}"
              - condition: template
                value_template: "{{ button_2_brightness_up }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current + brightness_step %}
                    {% if new > max_brightness %}{{ max_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 3: Brightness down
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 3 }}"
              - condition: template
                value_template: "{{ button_3_brightness_down }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: !input target_lights
                data:
                  brightness: >
                    {% set current = state_attr(target_lights[0], 'brightness') | int %}
                    {% set new = current - brightness_step %}
                    {% if new < min_brightness %}{{ min_brightness }}{% else %}{{ new }}{% endif %}
          
          # Button 4: Custom action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'short_release' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_custom }}"
            sequence:
              - choose:
                  # Scene cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_cycle' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene next
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_next' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: >
                            {% set current_time = now().timestamp() %}
                            {% set scene_index = (current_time | int) % scene_entities|length %}
                            {{ scene_entities[scene_index] if scene_entities else '' }}
                  
                  # Scene previous
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'scene_previous' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_entities[2] if scene_entities|length > 2 else scene_entities[0] if scene_entities else '' }}"
                  
                  # Color cycle
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'color_cycle' }}"
                    sequence:
                      - service: light.turn_on
                        target:
                          entity_id: !input target_lights
                        data:
                          hs_color: [0, 100]  # Red
                  
                  # Custom service
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"
          
          # Button 4: Long press action
          - conditions:
              - condition: template
                value_template: "{{ trigger.event.data.type == 'long_press' and trigger.event.data.subtype == 4 }}"
              - condition: template
                value_template: "{{ button_4_long_press }}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'room_relax_scene' and room_relax_scene != '' }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ room_relax_scene }}"
                  - conditions:
                      - condition: template
                        value_template: "{{ button_4_long_action == 'custom_service' and custom_service != '' }}"
                    sequence:
                      - service: "{{ custom_service }}"
                        target:
                          entity_id: !input target_lights
                        data: "{{ custom_service_data }}"

