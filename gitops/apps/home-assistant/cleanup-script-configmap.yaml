apiVersion: v1
kind: ConfigMap
metadata:
  name: home-assistant-cleanup-script
  namespace: home-assistant
  annotations:
    reloader.stakater.com/auto: "false"  # Exclude from Reloader - only used by CronJob
data:
  cleanup_orphaned_entities.py: |
    #!/usr/bin/env python3
    """
    Home Assistant Orphaned Entity Cleanup Script
    
    This script identifies and removes orphaned helper entities from Home Assistant.
    Orphaned entities are those that are no longer being provided by their integration
    (typically showing "restored: true" in attributes).
    
    Initially runs in dry-run mode for safety.
    """
    import os
    import sys
    import requests
    import json
    
    # Configuration from environment
    HA_URL = os.getenv('HA_URL', 'http://ha.amer.home')
    HA_TOKEN = os.getenv('HA_ACCESS_TOKEN')
    DRY_RUN = os.getenv('DRY_RUN', 'true').lower() == 'true'
    
    # Helper domains to check
    HELPER_DOMAINS = [
        'input_boolean',
        'input_datetime',
        'input_number',
        'input_select',
        'input_text',
    ]
    
    # API headers
    HEADERS = {
        'Authorization': f'Bearer {HA_TOKEN}',
        'Content-Type': 'application/json',
    }
    
    def log(message):
        """Print log message with prefix."""
        print(f'[HA-Cleanup] {message}')
    
    def get_entities():
        """Retrieve all entities from Home Assistant state API."""
        try:
            response = requests.get(f'{HA_URL}/api/states', headers=HEADERS, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            log(f'ERROR: Failed to fetch entities: {e}')
            sys.exit(1)
    
    def is_helper_entity(entity_id):
        """Check if entity is a helper entity."""
        domain = entity_id.split('.')[0]
        return domain in HELPER_DOMAINS
    
    def is_orphaned(entity):
        """
        Determine if an entity is orphaned.
        
        An entity is considered orphaned if it has 'restored: true' in attributes.
        This indicates the entity is no longer being provided by its integration.
        """
        # Check if entity has restored attribute set to true
        return entity.get('attributes', {}).get('restored', False)
    
    def delete_entity(entity_id):
        """
        Delete an orphaned entity using Home Assistant's state API.
        
        Note: For restored entities, we remove the state. The entity registry
        entry will be cleaned up automatically by Home Assistant.
        """
        try:
            # Delete the entity state - this removes it from Home Assistant
            response = requests.delete(
                f'{HA_URL}/api/states/{entity_id}',
                headers=HEADERS,
                timeout=30
            )
            
            if response.status_code in [200, 204, 404]:  # 200/204 = success, 404 = already deleted
                log(f'Successfully deleted entity: {entity_id}')
                return True
            else:
                log(f'WARNING: Failed to delete {entity_id}: HTTP {response.status_code} - {response.text}')
                return False
                
        except requests.exceptions.RequestException as e:
            log(f'ERROR: Exception while deleting {entity_id}: {e}')
            return False
    
    def main():
        """Main execution function."""
        log('Starting Home Assistant orphaned entity cleanup')
        log(f'Mode: {"DRY-RUN" if DRY_RUN else "DELETE MODE"}')
        
        if not HA_TOKEN:
            log('ERROR: HA_ACCESS_TOKEN environment variable not set')
            sys.exit(1)
        
        # Fetch all entities
        log('Fetching all entities from Home Assistant...')
        entities = get_entities()
        log(f'Found {len(entities)} total entities')
        
        # Filter for helper entities
        helper_entities = [e for e in entities if is_helper_entity(e['entity_id'])]
        log(f'Found {len(helper_entities)} helper entities')
        
        # Identify orphaned entities (those with restored: true)
        orphaned_entities = []
        for entity in helper_entities:
            if is_orphaned(entity):
                orphaned_entities.append(entity)
        
        if not orphaned_entities:
            log('No orphaned helper entities found. All clean!')
            return
        
        log(f'Found {len(orphaned_entities)} orphaned helper entities:')
        for entity in orphaned_entities:
            entity_id = entity['entity_id']
            restored = entity.get('attributes', {}).get('restored', False)
            log(f'  - {entity_id} (restored={restored})')
        
        # Delete orphaned entities if not in dry-run mode
        if DRY_RUN:
            log('DRY-RUN: Would delete the above entities. Set DRY_RUN=false to enable deletion.')
        else:
            log('Deleting orphaned entities...')
            deleted_count = 0
            failed_count = 0
            for entity in orphaned_entities:
                entity_id = entity['entity_id']
                if delete_entity(entity_id):
                    deleted_count += 1
                else:
                    failed_count += 1
            
            log(f'Cleanup complete: {deleted_count} deleted, {failed_count} failed')
        
        log('Cleanup script finished')
    
    if __name__ == '__main__':
        main()

