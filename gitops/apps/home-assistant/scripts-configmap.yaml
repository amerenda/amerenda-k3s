apiVersion: v1
kind: ConfigMap
metadata:
  name: homeassistant-scripts
data:
  activate_scene_with_helper.yaml: |
    activate_scene_with_helper:
      alias: "Activate Scene and Update Helper"
      mode: "parallel"
      fields:
        scene_entity:
          description: "Scene entity to activate (e.g., scene.bathroom_morning)"
        helper_entity:
          description: "Helper entity to update (e.g., input_select.bathroom_scene_cycle)"
        slot_name:
          description: "Slot name to set in helper (morning, day, evening, night)"
      sequence:
        - parallel:
            - service: "scene.turn_on"
              target:
                entity_id: "{{ scene_entity }}"
            - service: "input_select.select_option"
              target:
                entity_id: "{{ helper_entity }}"
              data:
                option: "{{ slot_name }}"
    
  power_on.yaml: |
    scheduled_light_on:
      alias: "Scheduled Light On (safe)"
      mode: "restart"
      fields:
        custom_schedule_enabled: { required: false }
        custom_s1_start: { required: false }
        custom_s2_start: { required: false }
        custom_s3_start: { required: false }
        custom_s4_start: { required: false }
        transition: { required: false }
        fallback_lights: { required: false }
      sequence:
        - variables:
            default_s1: "06:00:00"
            default_s2: "09:00:00"
            default_s3: "17:00:00"
            default_s4: "22:00:00"
    
            use_custom: >-
              {{ (custom_schedule_enabled is defined) and is_state(custom_schedule_enabled, 'on') }}
    
            s1_str: >-
              {% set v = states(custom_s1_start | default('')) if use_custom else default_s1 %}
              {{ default_s1 if v in ['unknown','unavailable','', None] else v }}
            s2_str: >-
              {% set v = states(custom_s2_start | default('')) if use_custom else default_s2 %}
              {{ default_s2 if v in ['unknown','unavailable','', None] else v }}
            s3_str: >-
              {% set v = states(custom_s3_start | default('')) if use_custom else default_s3 %}
              {{ default_s3 if v in ['unknown','unavailable','', None] else v }}
            s4_str: >-
              {% set v = states(custom_s4_start | default('')) if use_custom else default_s4 %}
              {{ default_s4 if v in ['unknown','unavailable','', None] else v }}
    
            now_ts: "{{ as_timestamp(now()) }}"
            s1: "{{ as_timestamp(today_at(s1_str)) }}"
            s2: "{{ as_timestamp(today_at(s2_str)) }}"
            s3: "{{ as_timestamp(today_at(s3_str)) }}"
            s4: "{{ as_timestamp(today_at(s4_str)) }}"
    
            slot: >-
              {% if now_ts >= s1 and now_ts < s2 %}morning
              {% elif now_ts >= s2 and now_ts < s3 %}day
              {% elif now_ts >= s3 and now_ts < s4 %}evening
              {% else %}night{% endif %}
    
            # Extract entity name from fallback_lights for scene naming
            _fb_entity: "{{ fallback_lights | default('') }}"
            _entity_name: >-
              {% set entity = _fb_entity %}
              {% if entity is string and entity != '' and entity|length >= 6 and entity[:6] == 'light.' %}
                {{ entity[6:] }}
              {% else %}
                {{ entity }}
              {% endif %}
    
            _override_select: "{{ 'input_select.' ~ _entity_name ~ '_' ~ slot ~ '_scene' }}"
            _override_val: >-
              {% set val = states(_override_select) if _entity_name and _entity_name != '' else '' %}
              {{ '' if val in ['unknown','unavailable','', None] else val }}
    
            default_scene_entity_id: "scene.{{ _entity_name }}_{{ slot }}"
            scene_to_activate: "{{ _override_val if _override_val else default_scene_entity_id }}"
            scene_exists: >-
              {{ scene_to_activate in (states.scene | map(attribute='entity_id') | list) if scene_to_activate else false }}
            
            scene_cycle_helper: >-
              {% if _entity_name and _entity_name != '' %}
                input_select.{{ _entity_name }}_scene_cycle
              {% else %}
                ''
              {% endif %}
    
            all_lights: "{{ states.light | map(attribute='entity_id') | list }}"
            dynamic_fallback: >-
              {% set fb = fallback_lights | default('') %}
              {% if fb and fb != '' and fb in all_lights %}{{ fb }}
              {% else %}{{ '' }}{% endif %}
        - choose:
            - conditions: "{{ scene_exists }}"
              sequence:
                - parallel:
                    - service: "scene.turn_on"
                      data:
                        transition: "{{ transition | default(0) }}"
                      target:
                        entity_id: "{{ scene_to_activate }}"
                    - if:
                        - condition: template
                          value_template: "{{ scene_cycle_helper != '' }}"
                      then:
                        - service: "input_select.select_option"
                          target:
                            entity_id: "{{ scene_cycle_helper }}"
                          data:
                            option: "{{ slot }}"
          default:
            - choose:
                - conditions: "{{ dynamic_fallback != '' }}"
                  sequence:
                    - service: "light.turn_on"
                      target:
                        entity_id: "{{ dynamic_fallback }}"
                    - service: "logbook.log"
                      data:
                        name: "scheduled_light_on"
                        message: "Scene '{{ scene_to_activate }}' missing; used '{{ dynamic_fallback }}'"
                        entity_id: "{{ dynamic_fallback }}"
              default:
                - service: "logbook.log"
                  data:
                    name: "scheduled_light_on"
                    message: "Scene '{{ scene_to_activate }}' missing; no fallback light entity available"
  room_toggle.yaml: |
    room_toggle:
      alias: "Room Toggle (smart with debug)"
      mode: "parallel"
      fields:
        target_lights:
          description: "Entity or group to control (entity_id, list, or target)"
      sequence:
        - variables:
            _ids: >-
              {% set tl = target_lights | default('') %}
              {% if tl is mapping and 'entity_id' in tl %}
                {{ tl.entity_id }}
              {% else %}
                {{ tl }}
              {% endif %}
            id_list: >-
              {% if _ids is string and _ids != '' %}
                {{ [_ids] }}
              {% elif _ids is sequence and _ids is not string %}
                {{ _ids | list }}
              {% else %}
                {{ [] }}
              {% endif %}
    
            # Check group state directly (for Hue groups that don't expand)
            group_on: >-
              {% if id_list | length == 1 %}
                {{ is_state(id_list[0], 'on') }}
              {% else %}
                {{ false }}
              {% endif %}
    
            # Check member entities via expand (for normal groups)
            expanded: "{{ expand(id_list) }}"
            members_on: "{{ expanded | selectattr('state','eq','on') | list | count > 0 }}"
    
            # Check member entities via state_attr (for Hue groups)
            attr_members: >-
              {% if id_list | length == 1 %}
                {{ state_attr(id_list[0], 'entity_id') | default([]) }}
              {% else %}
                {{ [] }}
              {% endif %}
            attr_members_on: "{{ expand(attr_members) | selectattr('state','eq','on') | list | count > 0 }}"
    
            # Any method indicates lights are on
            any_on: "{{ group_on or members_on or attr_members_on }}"
    
        # DEBUG: Log what we detected
        - service: "logbook.log"
          data:
            name: "room_toggle DEBUG"
            message: >-
              id_list={{ id_list }}, group_on={{ group_on }},
              members_on={{ members_on }}, attr_members_on={{ attr_members_on }},
              any_on={{ any_on }}
        - choose:
            - conditions: "{{ any_on }}"
              sequence:
                - service: "logbook.log"
                  data:
                    name: "room_toggle"
                    message: "Turning OFF {{ id_list }}"
                - service: "light.turn_off"
                  target:
                    entity_id: "{{ id_list }}"
          default:
            - service: "logbook.log"
              data:
                name: "room_toggle"
                message: "Turning ON {{ id_list[0] if id_list|length>0 else 'target_lights' }} via scheduled_light_on"
            - service: "script.scheduled_light_on"
              data:
                fallback_lights: "{{ id_list[0] if id_list|length>0 else '' }}"
