apiVersion: v1
data:
  power_on.yaml: |
    scheduled_light_on:
      alias: Scheduled Light On (safe)
      mode: restart
      fields:
        room_key: {}
        custom_schedule_enabled: { required: false }
        custom_s1_start: { required: false }
        custom_s2_start: { required: false }
        custom_s3_start: { required: false }
        custom_s4_start: { required: false }
        transition: { required: false }
        fallback_lights: { required: false }
      sequence:
        - variables:
            default_s1: "06:00:00"
            default_s2: "09:00:00"
            default_s3: "17:00:00"
            default_s4: "22:00:00"

            use_custom: >-
              {{ (custom_schedule_enabled is defined) and is_state(custom_schedule_enabled, 'on') }}

            s1_str: >-
              {% set v = states(custom_s1_start | default('')) if use_custom else default_s1 %}
              {{ default_s1 if v in ['unknown','unavailable','', None] else v }}
            s2_str: >-
              {% set v = states(custom_s2_start | default('')) if use_custom else default_s2 %}
              {{ default_s2 if v in ['unknown','unavailable','', None] else v }}
            s3_str: >-
              {% set v = states(custom_s3_start | default('')) if use_custom else default_s3 %}
              {{ default_s3 if v in ['unknown','unavailable','', None] else v }}
            s4_str: >-
              {% set v = states(custom_s4_start | default('')) if use_custom else default_s4 %}
              {{ default_s4 if v in ['unknown','unavailable','', None] else v }}

            now_ts: "{{ as_timestamp(now()) }}"
            s1: "{{ as_timestamp(today_at(s1_str)) }}"
            s2: "{{ as_timestamp(today_at(s2_str)) }}"
            s3: "{{ as_timestamp(today_at(s3_str)) }}"
            s4: "{{ as_timestamp(today_at(s4_str)) }}"

            slot: >-
              {% if now_ts >= s1 and now_ts < s2 %}morning
              {% elif now_ts >= s2 and now_ts < s3 %}day
              {% elif now_ts >= s3 and now_ts < s4 %}evening
              {% else %}night{% endif %}

            _override_select: "{{ 'input_select.' ~ (room_key | default('')) ~ '_' ~ slot ~ '_scene' }}"
            _override_val: >-
              {% set val = states(_override_select) if room_key | default('') else '' %}
              {{ '' if val in ['unknown','unavailable','', None] else val }}

            default_scene_entity_id: "scene.{{ room_key | default('') }}_{{ slot }}"
            scene_to_activate: "{{ _override_val if _override_val else default_scene_entity_id }}"
            scene_exists: "{{ scene_to_activate in (states.scene | map(attribute='entity_id') | list) if scene_to_activate else false }}"

            preferred_room_light: "light.{{ room_key | default('') }}"
            all_lights: "{{ states.light | map(attribute='entity_id') | list }}"
            dynamic_fallback: >-
              {% set fb = fallback_lights | default('') %}
              {% if preferred_room_light in all_lights %}{{ preferred_room_light }}
              {% elif fb in all_lights %}{{ fb }}
              {% else %}{{ '' }}{% endif %}
        - choose:
            - conditions: "{{ scene_exists }}"
              sequence:
                - service: scene.turn_on
                  data:
                    transition: "{{ transition | default(0) }}"
                  target:
                    entity_id: "{{ scene_to_activate }}"
          default:
            - choose:
                - conditions: "{{ dynamic_fallback != '' }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ dynamic_fallback }}"
                    - service: logbook.log
                      data:
                        name: "scheduled_light_on"
                        message: "Scene '{{ scene_to_activate }}' missing; used '{{ dynamic_fallback }}'"
                        entity_id: "{{ dynamic_fallback }}"
              default:
                - service: logbook.log
                  data:
                    name: "scheduled_light_on"
                    message: "Scene '{{ scene_to_activate }}' missing; no fallback light entity available"
  room_toggle.yaml: "room_toggle:\n  alias: Room Toggle (smart with debug)\n  mode:
    parallel\n  fields:\n    room_key:\n      description: Short name for the room
    (e.g., living_room)\n    target_lights:\n      description: Entity or group to
    control (entity_id, list, or target)\n  sequence:\n    - variables:\n        _ids:
    >-\n          {% set tl = target_lights | default('') %}\n          {% if tl is
    mapping and 'entity_id' in tl %}\n            {{ tl.entity_id }}\n          {%
    else %}\n            {{ tl }}\n          {% endif %}\n        id_list: >-\n          {%
    if _ids is string and _ids != '' %}\n            {{ [_ids] }}\n          {% elif
    _ids is sequence and _ids is not string %}\n            {{ _ids | list }}\n          {%
    else %}\n            {{ [] }}\n          {% endif %}\n        \n        # Check
    group state directly (for Hue groups that don't expand)\n        group_on: >-\n
    \         {% if id_list | length == 1 %}\n            {{ is_state(id_list[0],
    'on') }}\n          {% else %}\n            {{ false }}\n          {% endif %}\n
    \       \n        # Check member entities via expand (for normal groups)\n        expanded:
    \"{{ expand(id_list) }}\"\n        members_on: \"{{ expanded | selectattr('state','eq','on')
    | list | count > 0 }}\"\n        \n        # Check member entities via state_attr
    (for Hue groups)\n        attr_members: >-\n          {% if id_list | length ==
    1 %}\n            {{ state_attr(id_list[0], 'entity_id') | default([]) }}\n          {%
    else %}\n            {{ [] }}\n          {% endif %}\n        attr_members_on:
    \"{{ expand(attr_members) | selectattr('state','eq','on') | list | count > 0 }}\"\n
    \       \n        # Any method indicates lights are on\n        any_on: \"{{ group_on
    or members_on or attr_members_on }}\"\n    \n    # DEBUG: Log what we detected\n
    \   - service: logbook.log\n      data:\n        name: \"room_toggle DEBUG\"\n
    \       message: >-\n          id_list={{ id_list }}, group_on={{ group_on }},
    \n          members_on={{ members_on }}, attr_members_on={{ attr_members_on }},
    \n          any_on={{ any_on }}\n    \n    - choose:\n        - conditions: \"{{
    any_on }}\"\n          sequence:\n            - service: logbook.log\n              data:\n
    \               name: \"room_toggle\"\n                message: \"Turning OFF
    {{ id_list }}\"\n            - service: light.turn_off\n              target:\n
    \               entity_id: \"{{ id_list }}\"\n      default:\n        - service:
    logbook.log\n          data:\n            name: \"room_toggle\"\n            message:
    \"Turning ON {{ room_key }} via scheduled_light_on\"\n        - service: script.scheduled_light_on\n
    \         data:\n            room_key: \"{{ room_key | default('') }}\"\n            fallback_lights:
    \"{{ id_list[0] if id_list|length>0 else '' }}\"\n"
kind: ConfigMap
metadata:
  name: homeassistant-scripts
