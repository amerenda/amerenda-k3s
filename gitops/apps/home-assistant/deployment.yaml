apiVersion: apps/v1
kind: Deployment
metadata:
  name: homeassistant
  namespace: home-assistant
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: homeassistant
  template:
    metadata:
      labels:
        app: homeassistant
    spec:
      hostNetwork: true
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - "10.100.20.241"
          - "8.8.8.8"
          - "1.1.1.1"
        searches:
          - "amer.home"
          - "merenda.home.arpa"
        options:
          - name: "ndots"
            value: "2"
          - name: "edns0"
      initContainers:
        - name: install-hacs
          image: alpine:3.20
          imagePullPolicy: IfNotPresent
          env:
            # Pin to a specific release (recommended). Example: "2.0.5" or "v2.0.5".
            # "latest" works too, but pinning avoids surprises.
            - name: HACS_VERSION
              value: "2.0.5"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              apk add --no-cache curl unzip
              
              CONFIG_DIR="/config"
              CC_DIR="${CONFIG_DIR}/custom_components"
              HACS_DST="${CC_DIR}/hacs"
              VERSION_FILE="${HACS_DST}/.installed_version"
              TMPDIR="$(mktemp -d)"
              mkdir -p "${CC_DIR}"

              # Check if HACS is already installed with the same version
              if [ -f "${VERSION_FILE}" ] && [ -d "${HACS_DST}" ]; then
                INSTALLED_VERSION=$(cat "${VERSION_FILE}" 2>/dev/null || echo "")
                if [ "${INSTALLED_VERSION}" = "${HACS_VERSION}" ]; then
                  echo "HACS ${HACS_VERSION} is already installed. Skipping installation."
                  exit 0
                else
                  echo "HACS version mismatch. Installed: ${INSTALLED_VERSION}, Required: ${HACS_VERSION}. Reinstalling..."
                fi
              else
                echo "HACS not found or version file missing. Installing ${HACS_VERSION}..."
              fi

              # Download HACS
              if [ "${HACS_VERSION}" = "latest" ]; then
                URL="https://github.com/hacs/integration/releases/latest/download/hacs.zip"
              else
                URL="https://github.com/hacs/integration/releases/download/${HACS_VERSION}/hacs.zip"
                if ! curl -fsI "${URL}" >/dev/null 2>&1; then
                  NV="${HACS_VERSION#v}"
                  URL="https://github.com/hacs/integration/releases/download/v${NV}/hacs.zip"
                fi
              fi

              echo "Downloading HACS: ${URL}"
              curl -fsSL "${URL}" -o "${TMPDIR}/hacs.zip"
              unzip -q "${TMPDIR}/hacs.zip" -d "${TMPDIR}"

              # Find the hacs directory in the extracted files
              HACS_SRC=""
              # Check if files are directly in TMPDIR
              if [ -f "${TMPDIR}/manifest.json" ] && [ -f "${TMPDIR}/config_flow.py" ]; then
                HACS_SRC="${TMPDIR}"
              else
                # Look in subdirectories
                for dir in "${TMPDIR}"/*; do
                  if [ -d "$dir" ] && [ -f "$dir/manifest.json" ] && [ -f "$dir/config_flow.py" ]; then
                    HACS_SRC="$dir"
                    break
                  fi
                done
              fi

              if [ -z "$HACS_SRC" ]; then
                echo "ERROR: Could not find HACS source directory"
                echo "Contents of ${TMPDIR}:"
                ls -la "${TMPDIR}"
                exit 1
              fi

              echo "Installing HACS from $HACS_SRC to $HACS_DST"
              
              # Ensure custom_components exists but do not touch other integrations
              mkdir -p "${CC_DIR}"
              
              # Replace only the hacs subfolder when installing/upgrading
              rm -rf "${HACS_DST}" 2>/dev/null || true
              mkdir -p "${HACS_DST}"
              cp -r "${HACS_SRC}"/* "${HACS_DST}/" 2>/dev/null || true
              
              # Create version file
              if [ -f "${HACS_DST}/manifest.json" ]; then
                VER=$(grep -o '"version"[[:space:]]*:[[:space:]]*"[^"]*"' "${HACS_DST}/manifest.json" | sed 's/.*"\([^"]*\)".*/\1/')
                echo "$VER" > "${VERSION_FILE}"
                echo "HACS $VER installed successfully"
              fi
              
              # Cleanup
              rm -rf "${TMPDIR}"
          volumeMounts:
            - name: config
              mountPath: /config

        - name: setup-default-config
          image: alpine:3.20
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              CONFIG_DIR="/config"
        
              # Directories
              mkdir -p "${CONFIG_DIR}/themes"
              mkdir -p "${CONFIG_DIR}/www/pets" "${CONFIG_DIR}/www/intruders"
              mkdir -p "${CONFIG_DIR}/scripts"                     # dir-based scripts
              mkdir -p "${CONFIG_DIR}/automations"                 # optional manual files (not auto-included)
              mkdir -p "${CONFIG_DIR}/scenes"                      # optional manual files (not auto-included)
              mkdir -p "${CONFIG_DIR}/dashboards/views"            # YAML dashboards live here
              mkdir -p "${CONFIG_DIR}/helpers/input_boolean"
              mkdir -p "${CONFIG_DIR}/helpers/input_datetime"
              mkdir -p "${CONFIG_DIR}/helpers/input_select"
              mkdir -p "${CONFIG_DIR}/helpers/input_number"
              mkdir -p "${CONFIG_DIR}/packages/helpers/generated"  # for your Jinja-generated helpers
        
              # configuration.yaml
              cat > "${CONFIG_DIR}/configuration.yaml" << 'EOF'
              # Loads default set of integrations. Do not remove.
              default_config: {}
        
              # Load frontend themes from the themes folder
              frontend:
                themes: !include_dir_merge_named themes
        
              # Load UI-managed files for Automations & Scenes (so the UI keeps working)
              automation: !include automations.yaml
              scene: !include scenes.yaml
        
              # Scripts managed as separate files under /config/scripts/*.yaml (dict merge)
              script: !include_dir_merge_named scripts
        
              # Input helpers (split by domain)
              input_boolean:  !include_dir_merge_named helpers/input_boolean/
              input_datetime: !include_dir_merge_named helpers/input_datetime/
              input_select:   !include_dir_merge_named helpers/input_select/
              input_number:   !include_dir_merge_named helpers/input_number/
              input_text:     !include_dir_merge_named helpers/input_text/
        
              # Packages (loads your generated per-room helpers under packages/helpers/generated/)
              homeassistant:
                packages: !include_dir_named packages
        
              # Lovelace: storage mode + YAML dashboards
              lovelace:
                mode: storage
                dashboards:
                  room-schedule-viewer:
                    mode: yaml
                    title: Room Schedule Viewer
                    icon: mdi:calendar-clock
                    show_in_sidebar: true
                    filename: dashboards/views/room_schedule_viewer.yaml
                  room-schedule-configuration:
                    mode: yaml
                    title: Room Schedule Configuration
                    icon: mdi:calendar-edit
                    show_in_sidebar: true
                    filename: dashboards/views/room_schedule_configuration.yaml
                  light-control:
                    mode: yaml
                    title: Light Control
                    icon: mdi:lightbulb-group
                    show_in_sidebar: true
                    filename: dashboards/views/light_control.yaml
        
              # HTTP reverse proxy
              http:
                use_x_forwarded_for: true
                trusted_proxies:
                  - 10.100.20.0/24
                  - 10.43.0.0/16
                  - 10.42.0.0/16
        
              # Media sources - expose local media folders to Media dashboard
              media_source: {}
        
              # Shell commands
              shell_command:
                cleanup_old_photos: 'find /config/www/pets -name "*.jpg" -mtime +30 -delete && find /config/www/intruders -name "*.jpg" -mtime +30 -delete'
              EOF
        
              # Seed UI files if missing/empty (correct types!)
              # scripts.yaml is a DICT; scenes/automations are LISTS
              if [ ! -f "${CONFIG_DIR}/scripts.yaml" ] || [ ! -s "${CONFIG_DIR}/scripts.yaml" ]; then
                echo "{}" > "${CONFIG_DIR}/scripts.yaml"
              fi
              if [ ! -f "${CONFIG_DIR}/scenes.yaml" ] || [ ! -s "${CONFIG_DIR}/scenes.yaml" ]; then
                echo "[]" > "${CONFIG_DIR}/scenes.yaml"
              fi
              if [ ! -f "${CONFIG_DIR}/automations.yaml" ] || [ ! -s "${CONFIG_DIR}/automations.yaml" ]; then
                echo "[]" > "${CONFIG_DIR}/automations.yaml"
              fi
        
              # Perms
              chmod 755 "${CONFIG_DIR}/www/pets" "${CONFIG_DIR}/www/intruders"
        
              echo "Default configuration and directories created"

          volumeMounts:
            - name: config
              mountPath: /config
        - name: validate-config
          image: ghcr.io/home-assistant/home-assistant:stable
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              echo "Validating Home Assistant configuration..."
              
              # Run configuration check
              python -m homeassistant --script check_config --config /config
              
              echo "Configuration validation passed"
          volumeMounts:
            - name: config
              mountPath: /config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - homeassistant
              topologyKey: kubernetes.io/hostname
      containers:
        - name: homeassistant
          image: ghcr.io/home-assistant/home-assistant:stable
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
                - NET_BROADCAST
                - SYS_ADMIN
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "2"
          ports:
            - name: http
              containerPort: 8123
              hostPort: 8123
          env:
            - name: TZ
              value: "America/New_York"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exit 0
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exit 0
            initialDelaySeconds: 0
            periodSeconds: 60
            timeoutSeconds: 35
            failureThreshold: 1
          volumeMounts:
            - name: config
              mountPath: /config
            - name: automations
              mountPath: /config/automations
            - name: blueprints
              mountPath: /config/blueprints/automation/_defaults
              readOnly: true
            - name: helpers-input-boolean
              mountPath: /config/helpers/input_boolean
              readOnly: true
            - name: helpers-input-datetime
              mountPath: /config/helpers/input_datetime
              readOnly: true
            - name: helpers-input-select
              mountPath: /config/helpers/input_select
              readOnly: true
            - name: helpers-input-number
              mountPath: /config/helpers/input_number
              readOnly: true
            - name: helpers-input-text
              mountPath: /config/helpers/input_text
              readOnly: true
            - name: dashboards
              mountPath: /config/dashboards/views
              readOnly: true
            - name: scripts
              mountPath: /config/scripts
              readOnly: true
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","kill -TERM 1 && sleep 5"]
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: homeassistant-config
        - name: automations
          configMap:
            name: homeassistant-automations
        - name: blueprints
          configMap:
            name: homeassistant-blueprints
        - name: helpers-input-boolean
          configMap:
            name: homeassistant-helpers-input-boolean
        - name: helpers-input-datetime
          configMap:
            name: homeassistant-helpers-input-datetime
        - name: helpers-input-select
          configMap:
            name: homeassistant-helpers-input-select
        - name: helpers-input-number
          configMap:
            name: homeassistant-helpers-input-number
        - name: helpers-input-text
          configMap:
            name: homeassistant-helpers-input-text
        - name: dashboards
          configMap:
            name: homeassistant-dashboards
        - name: scripts
          configMap:
            name: homeassistant-scripts