blueprint:
  name: "Room - Motion Control (scheduled scene, per-window options)"
  description: >
    On motion: optionally turn on using script.scheduled_light_on based on current schedule slot
    (morning/day/evening/night). For each window you can block "turn-on" and set an auto-off
    timeout after motion clears. Supports per-room schedule overrides via helpers.
  domain: "automation"

  input:
    room_key:
      name: "Room Key"
      description: "Short name used by scenes: scene.<room_key>_(morning|day|evening|night)"
      selector: { text: {} }

    target_lights:
      name: "Target lights (group or list)"
      selector: { target: { entity: { domain: "light" } } }

    motion_sensor:
      name: "Motion sensor (binary_sensor)"
      selector: { entity: { domain: "binary_sensor" } }

    motion_enabled:
      name: "Motion Control Enabled (input_boolean)"
      description: "If OFF, motion won't control lights in this room."
      selector: { entity: { domain: "input_boolean" } }

    # ---- Optional: pass your per-room schedule overrides to scheduled_light_on
    custom_schedule_enabled:
      name: "(Optional) Custom schedule enabled boolean"
      default:
      selector: { entity: { domain: "input_boolean" } }
    custom_s1_start:
      name: "(Optional) Morning start (time-only)"
      default:
      selector: { entity: { domain: "input_datetime" } }
    custom_s2_start:
      name: "(Optional) Day start (time-only)"
      default:
      selector: { entity: { domain: "input_datetime" } }
    custom_s3_start:
      name: "(Optional) Evening start (time-only)"
      default:
      selector: { entity: { domain: "input_datetime" } }
    custom_s4_start:
      name: "(Optional) Night start (time-only)"
      default:
      selector: { entity: { domain: "input_datetime" } }

    # ---- Per-window controls (helpers optional; defaults provided)
    morning_block_helper:
      name: "(Optional) Block motion ON during Morning (input_boolean)"
      default:
      selector: { entity: { domain: "input_boolean" } }
    day_block_helper:
      name: "(Optional) Block motion ON during Day (input_boolean)"
      default:
      selector: { entity: { domain: "input_boolean" } }
    evening_block_helper:
      name: "(Optional) Block motion ON during Evening (input_boolean)"
      default:
      selector: { entity: { domain: "input_boolean" } }
    night_block_helper:
      name: "(Optional) Block motion ON during Night (input_boolean)"
      default:
      selector: { entity: { domain: "input_boolean" } }

    morning_auto_off_default:
      name: "Morning auto-off (minutes, default if no helper)"
      default: 5
      selector: { number: { min: 0, max: 240, mode: "slider" } }
    morning_auto_off_helper:
      name: "(Optional) Morning auto-off helper (input_number)"
      default:
      selector: { entity: { domain: "input_number" } }

    day_auto_off_default:
      name: "Day auto-off (minutes, default if no helper)"
      default: 5
      selector: { number: { min: 0, max: 240, mode: "slider" } }
    day_auto_off_helper:
      name: "(Optional) Day auto-off helper (input_number)"
      default:
      selector: { entity: { domain: "input_number" } }

    evening_auto_off_default:
      name: "Evening auto-off (minutes, default if no helper)"
      default: 10
      selector: { number: { min: 0, max: 240, mode: "slider" } }
    evening_auto_off_helper:
      name: "(Optional) Evening auto-off helper (input_number)"
      default:
      selector: { entity: { domain: "input_number" } }

    night_auto_off_default:
      name: "Night auto-off (minutes, default if no helper)"
      default: 1
      selector: { number: { min: 0, max: 240, mode: "slider" } }
    night_auto_off_helper:
      name: "(Optional) Night auto-off helper (input_number)"
      default:
      selector: { entity: { domain: "input_number" } }

mode: "restart"
max_exceeded: "silent"

variables:
  default_s1: "06:00:00"
  default_s2: "09:00:00"
  default_s3: "17:00:00"
  default_s4: "22:00:00"

  use_custom: >-
    {{ custom_schedule_enabled is defined and custom_schedule_enabled != none and
       is_state(custom_schedule_enabled, 'on') }}

  s1_str: >-
    {% set v = states(custom_s1_start) if use_custom else default_s1 %}
    {% if v in ['unknown','unavailable',''] %}{{ default_s1 }}{% else %}{{ v }}{% endif %}
  s2_str: >-
    {% set v = states(custom_s2_start) if use_custom else default_s2 %}
    {% if v in ['unknown','unavailable',''] %}{{ default_s2 }}{% else %}{{ v }}{% endif %}
  s3_str: >-
    {% set v = states(custom_s3_start) if use_custom else default_s3 %}
    {% if v in ['unknown','unavailable',''] %}{{ default_s3 }}{% else %}{{ v }}{% endif %}
  s4_str: >-
    {% set v = states(custom_s4_start) if use_custom else default_s4 %}
    {% if v in ['unknown','unavailable',''] %}{{ default_s4 }}{% else %}{{ v }}{% endif %}

  now_ts: "{{ as_timestamp(now()) }}"
  s1: "{{ as_timestamp(today_at(s1_str)) }}"
  s2: "{{ as_timestamp(today_at(s2_str)) }}"
  s3: "{{ as_timestamp(today_at(s3_str)) }}"
  s4: "{{ as_timestamp(today_at(s4_str)) }}"

  slot: >-
    {% if now_ts >= s1 and now_ts < s2 %}morning
    {% elif now_ts >= s2 and now_ts < s3 %}day
    {% elif now_ts >= s3 and now_ts < s4 %}evening
    {% else %}night{% endif %}

  block_morning: "{{ is_state(morning_block_helper, 'on') if morning_block_helper else false }}"
  block_day:     "{{ is_state(day_block_helper, 'on') if day_block_helper else false }}"
  block_evening: "{{ is_state(evening_block_helper, 'on') if evening_block_helper else false }}"
  block_night:   "{{ is_state(night_block_helper, 'on') if night_block_helper else false }}"

  morning_auto_off_mins: >-
    {{ (states(morning_auto_off_helper) | int(0)) if morning_auto_off_helper else (morning_auto_off_default | int) }}
  day_auto_off_mins: >-
    {{ (states(day_auto_off_helper) | int(0)) if day_auto_off_helper else (day_auto_off_default | int) }}
  evening_auto_off_mins: >-
    {{ (states(evening_auto_off_helper) | int(0)) if evening_auto_off_helper else (evening_auto_off_default | int) }}
  night_auto_off_mins: >-
    {{ (states(night_auto_off_helper) | int(0)) if night_auto_off_helper else (night_auto_off_default | int) }}

  block_current: >-
    {% set map = {'morning': block_morning, 'day': block_day, 'evening': block_evening, 'night': block_night} %}
    {{ map[slot] }}
  auto_off_current_mins: >-
    {% set map = {
      'morning': morning_auto_off_mins,
      'day': day_auto_off_mins,
      'evening': evening_auto_off_mins,
      'night': night_auto_off_mins
    } %}
    {{ map[slot] | int(0) }}

trigger:
  - platform: "state"
    entity_id: !input motion_sensor
    to: "on"
    id: motion_on

  - platform: "state"
    entity_id: !input motion_sensor
    to: "off"
    id: motion_off

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: motion_on
          - condition: state
            entity_id: !input motion_enabled
            state: "on"
          - condition: template
            value_template: "{{ not block_current }}"
        sequence:
          - service: "script.scheduled_light_on"
            data:
              room_key: !input room_key
              custom_schedule_enabled: !input custom_schedule_enabled
              custom_s1_start: !input custom_s1_start
              custom_s2_start: !input custom_s2_start
              custom_s3_start: !input custom_s3_start
              custom_s4_start: !input custom_s4_start

      - conditions:
          - condition: trigger
            id: motion_off
          - condition: state
            entity_id: !input motion_enabled
            state: "on"
        sequence:
          - if:
              - condition: template
                value_template: "{{ auto_off_current_mins | int(0) > 0 }}"
            then:
              - delay:
                  minutes: "{{ auto_off_current_mins | int(0) }}"
              - condition: state
                entity_id: !input motion_sensor
                state: "off"
              - service: "light.turn_off"
                target: !input target_lights
