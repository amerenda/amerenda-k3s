scheduled_light_on:
  alias: Scheduled Light On (safe)
  mode: restart
  fields:
    room_key:
      description: e.g. living_room
      example: living_room
    custom_schedule_enabled:
      required: false
    custom_s1_start:
      required: false
    custom_s2_start:
      required: false
    custom_s3_start:
      required: false
    custom_s4_start:
      required: false
    transition:
      required: false
  sequence:
    - variables:
        default_s1: "06:00:00"
        default_s2: "09:00:00"
        default_s3: "17:00:00"
        default_s4: "22:00:00"

        use_custom: >-
          {{ custom_schedule_enabled is defined and is_state(custom_schedule_enabled, 'on') }}

        # Use states() *safely*; guard unknown/unavailable/empty
        s1_str: >-
          {% set v = states(custom_s1_start) if use_custom else default_s1 %}
          {{ default_s1 if v in ['unknown','unavailable','', None] else v }}
        s2_str: >-
          {% set v = states(custom_s2_start) if use_custom else default_s2 %}
          {{ default_s2 if v in ['unknown','unavailable','', None] else v }}
        s3_str: >-
          {% set v = states(custom_s3_start) if use_custom else default_s3 %}
          {{ default_s3 if v in ['unknown','unavailable','', None] else v }}
        s4_str: >-
          {% set v = states(custom_s4_start) if use_custom else default_s4 %}
          {{ default_s4 if v in ['unknown','unavailable','', None] else v }}

        now_ts: "{{ as_timestamp(now()) }}"
        s1: "{{ as_timestamp(today_at(s1_str)) }}"
        s2: "{{ as_timestamp(today_at(s2_str)) }}"
        s3: "{{ as_timestamp(today_at(s3_str)) }}"
        s4: "{{ as_timestamp(today_at(s4_str)) }}"

        slot: >-
          {% if now_ts >= s1 and now_ts < s2 %}morning
          {% elif now_ts >= s2 and now_ts < s3 %}day
          {% elif now_ts >= s3 and now_ts < s4 %}evening
          {% else %}night{% endif %}

        # If the input_select exists and contains a valid scene entity_id, use it.
        _override_select: "{{ 'input_select.' ~ room_key ~ '_' ~ slot ~ '_scene' }}"
        _override_val: >-
          {% set val = states(_override_select) %}
          {{ '' if val in ['unknown','unavailable','', None] else val }}

        default_scene_entity_id: "scene.{{ room_key }}_{{ slot }}"
        scene_to_activate: >-
          {% set candidate = _override_val if _override_val else default_scene_entity_id %}
          {{ candidate }}

        # Verify the candidate actually exists in HA's state machine
        scene_exists: >-
          {{ scene_to_activate in states.scene | map(attribute='entity_id') | list }}
    - choose:
        - conditions: "{{ scene_exists }}"
          sequence:
            - service: scene.turn_on
              data:
                transition: "{{ transition | default(0) }}"
              target:
                entity_id: "{{ scene_to_activate }}"
      default:
        # Fallback to a best-effort: turn on the room's lights if scene missing
        - service: light.turn_on
          target:
            entity_id: "light.{{ room_key }}_lights"
        - service: logbook.log
          data:
            name: "scheduled_light_on"
            message: >-
              Scene '{{ scene_to_activate }}' not found; fell back to light.turn_on
            entity_id: "light.{{ room_key }}_lights"
