name: Home Assistant Configuration Check

on:
  push:
    branches: [ main ]
    paths:
      - 'gitops/apps/home-assistant/**'
      - '.github/workflows/ha-config-check.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'gitops/apps/home-assistant/**'
      - '.github/workflows/ha-config-check.yaml'

jobs:
  yaml-lint:
    name: YAML Lint
    runs-on: arc-runner-set
    # Run on PRs and pushes to main
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Run yamllint on raw configuration files
        run: |
          echo "Running yamllint on raw Home Assistant configuration files..."
          echo ""
          
          # Only lint files in the configuration directory (not generated ConfigMaps)
          # Exclude template files and generated helper files
          echo "Checking files in: gitops/apps/home-assistant/configuration/"
          echo ""
          
          # Capture yamllint output
          set +e
          yamllint -c .yamllint.yaml \
            gitops/apps/home-assistant/configuration/automations/ \
            gitops/apps/home-assistant/configuration/blueprints/ \
            gitops/apps/home-assistant/configuration/scripts/ \
            gitops/apps/home-assistant/configuration/dashboards/ \
            gitops/apps/home-assistant/configuration/helpers/input_text/ \
            gitops/apps/home-assistant/configuration/helpers/generated/ 2>&1 | tee /tmp/yamllint-output.txt
          YAMLLINT_EXIT=$?
          set -e
          
          if [ $YAMLLINT_EXIT -ne 0 ]; then
            echo ""
            echo "::error::YAML linting found errors in raw configuration files. See details below."
            echo ""
            echo "=== YAML Linting Errors ==="
            echo ""
            
            # Track unique files with errors
            declare -A files_with_errors
            
            # Parse yamllint output and format errors
            while IFS= read -r line; do
              # Match yamllint format: file:line:col: level: message
              if [[ "$line" =~ ^([^:]+):([0-9]+):([0-9]+):[[:space:]]*(warning|error):[[:space:]]*(.+)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                col_num="${BASH_REMATCH[3]}"
                level="${BASH_REMATCH[4]}"
                message="${BASH_REMATCH[5]}"
                
                # Track this file
                files_with_errors["$file"]=1
                
                # Create GitHub annotation
                echo "::${level} file=${file},line=${line_num},col=${col_num}::${file}:${line_num}:${col_num}: ${message}"
                
                # Print formatted error
                echo "üìÑ ${file}"
                echo "   Line ${line_num}, Column ${col_num}: ${message}"
                
                # Provide helpful hints
                case "$message" in
                  *"indentation"*)
                    echo "   üí° Hint: Use 2 spaces for indentation (not tabs)"
                    ;;
                  *"line too long"*|*"line-length"*)
                    echo "   üí° Hint: Line exceeds 120 characters. Break it into multiple lines"
                    ;;
                  *"trailing spaces"*)
                    echo "   üí° Hint: Remove trailing whitespace"
                    ;;
                  *"document-start"*)
                    echo "   üí° Hint: Add '---' at the start of the file if needed"
                    ;;
                  *"duplication"*|*"key-duplicates"*)
                    echo "   üí° Hint: Check for duplicate keys in the same section"
                    ;;
                  *"truthy"*)
                    echo "   üí° Hint: Quote values like 'yes', 'no', 'on', 'off' if they're not booleans"
                    ;;
                  *"empty-lines"*)
                    echo "   üí° Hint: Too many empty lines (max 2 consecutive)"
                    ;;
                esac
                echo ""
              # Handle config errors (invalid config messages)
              elif [[ "$line" =~ "invalid config" ]] || [[ "$line" =~ "unknown option" ]] || [[ "$line" =~ "no such rule" ]]; then
                echo "::error::${line}"
                echo "‚ö†Ô∏è  Configuration Error: ${line}"
                echo ""
              fi
            done < /tmp/yamllint-output.txt
            
            echo "=== Files with errors ==="
            for file in "${!files_with_errors[@]}"; do
              echo "  - ${file}"
            done | sort
            echo ""
            echo "=== End of YAML Linting Errors ==="
            exit 1
          else
            echo ""
            echo "‚úÖ YAML linting passed - no errors found in raw configuration files!"
          fi
      
      - name: Validate generated ConfigMaps (basic YAML syntax only)
        run: |
          echo "Validating generated ConfigMaps for basic YAML syntax..."
          echo ""
          
          # Find all ConfigMap files
          CONFIGMAP_FILES=$(find gitops/apps/home-assistant/ -name "*-configmap.yaml" -type f 2>/dev/null || true)
          
          if [ -z "$CONFIGMAP_FILES" ]; then
            echo "No ConfigMap files found to validate."
            exit 0
          fi
          
          # Use yamllint with a minimal config that only checks syntax (no style rules)
          cat > /tmp/configmap-lint.yaml << 'EOF'
          extends: default
          rules:
            # Only check for syntax errors, not style
            line-length: disable
            comments: disable
            indentation: disable
            truthy: disable
            brackets: disable
            braces: disable
            commas: disable
            colons: disable
            hyphens: disable
            trailing-spaces: disable
            empty-lines: disable
            document-start: disable
            document-end: disable
            quoted-strings: disable
            octal-values: disable
          EOF
          
          set +e
          ERROR_COUNT=0
          for file in $CONFIGMAP_FILES; do
            echo "Checking: ${file}"
            if ! yamllint -c /tmp/configmap-lint.yaml "$file" 2>&1; then
              echo "::error file=${file}::ConfigMap ${file} has YAML syntax errors"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
          done
          set -e
          
          if [ $ERROR_COUNT -gt 0 ]; then
            echo ""
            echo "::error::Found ${ERROR_COUNT} ConfigMap file(s) with YAML syntax errors"
            exit 1
          else
            echo ""
            echo "‚úÖ All ConfigMaps have valid YAML syntax!"
          fi

  ha-config-check:
    name: Home Assistant Configuration Check
    runs-on: arc-runner-set
    needs: yaml-lint
    # Run on PRs and pushes to main
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    env:
      HA_VERSION: "2024.10.0"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Home Assistant
        uses: frenck/action-home-assistant@v1
        with:
          ha_version: ${{ env.HA_VERSION }}

      - name: Prepare Home Assistant configuration
        run: |
          # Create a temporary HA config directory
          mkdir -p /tmp/ha-config
          
          # Copy HA source files to config directory
          cp -r gitops/apps/home-assistant/configuration/automations/* /tmp/ha-config/ 2>/dev/null || true
          cp -r gitops/apps/home-assistant/configuration/blueprints/* /tmp/ha-config/ 2>/dev/null || true
          cp -r gitops/apps/home-assistant/configuration/scripts/* /tmp/ha-config/ 2>/dev/null || true
          cp -r gitops/apps/home-assistant/configuration/dashboards/* /tmp/ha-config/ 2>/dev/null || true
          
          # Create basic configuration.yaml
          cat > /tmp/ha-config/configuration.yaml << 'EOF'
          # Loads default set of integrations. Do not remove.
          default_config: {}
          
          # Load UI-managed files for Automations & Scenes
          automation: !include automations.yaml
          scene: !include scenes.yaml
          
          # Scripts managed as separate files
          script: !include_dir_merge_named scripts
          
          # Input helpers
          input_boolean:  !include_dir_merge_named helpers/input_boolean/
          input_datetime: !include_dir_merge_named helpers/input_datetime/
          input_select:   !include_dir_merge_named helpers/input_select/
          input_number:   !include_dir_merge_named helpers/input_number/
          input_text:     !include_dir_merge_named helpers/input_text/
          
          # Packages (helpers renamed from packages)
          homeassistant:
            packages: !include_dir_named packages
          EOF
          
          # Create empty UI files
          echo "[]" > /tmp/ha-config/automations.yaml
          echo "[]" > /tmp/ha-config/scenes.yaml
          echo "{}" > /tmp/ha-config/scripts.yaml
          
          # Create helper directories
          mkdir -p /tmp/ha-config/helpers/input_boolean
          mkdir -p /tmp/ha-config/helpers/input_datetime
          mkdir -p /tmp/ha-config/helpers/input_select
          mkdir -p /tmp/ha-config/helpers/input_number
          mkdir -p /tmp/ha-config/helpers/input_text
          mkdir -p /tmp/ha-config/packages
          
          # Copy helper files from generated directory
          if [ -d "gitops/apps/home-assistant/configuration/helpers/generated" ]; then
            find gitops/apps/home-assistant/configuration/helpers/generated/input_boolean -name "*.yaml" -exec cp {} /tmp/ha-config/helpers/input_boolean/ \; 2>/dev/null || true
            find gitops/apps/home-assistant/configuration/helpers/generated/input_datetime -name "*.yaml" -exec cp {} /tmp/ha-config/helpers/input_datetime/ \; 2>/dev/null || true
            find gitops/apps/home-assistant/configuration/helpers/generated/input_select -name "*.yaml" -exec cp {} /tmp/ha-config/helpers/input_select/ \; 2>/dev/null || true
            find gitops/apps/home-assistant/configuration/helpers/generated/input_number -name "*.yaml" -exec cp {} /tmp/ha-config/helpers/input_number/ \; 2>/dev/null || true
            find gitops/apps/home-assistant/configuration/helpers/generated/input_text -name "*.yaml" -exec cp {} /tmp/ha-config/helpers/input_text/ \; 2>/dev/null || true
          fi
          
          # Copy package files (if any exist in helpers directory)
          find gitops/apps/home-assistant/configuration/helpers -name "*.yaml" -not -path "*/generated/*" -not -path "*/input_text/*" -not -name "*_template.yaml.j2" -exec cp {} /tmp/ha-config/packages/ \; 2>/dev/null || true

      - name: Run Home Assistant configuration check
        run: |
          # Set HA config directory
          export HA_CONFIG_DIR=/tmp/ha-config
          
          # Run configuration check
          hass --script check_config --config "$HA_CONFIG_DIR"

      - name: Run hassfest (if custom_components exist)
        if: contains(github.event.head_commit.modified, 'custom_components') || contains(github.event.head_commit.added, 'custom_components')
        run: |
          if [ -d "gitops/apps/home-assistant/custom_components" ]; then
            pip install hassfest
            hassfest gitops/apps/home-assistant/
          else
            echo "No custom_components directory found, skipping hassfest"
          fi
